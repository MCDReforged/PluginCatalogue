{
  "url": "https://github.com/AnzhiZhang/MCDReforgedPlugins",
  "name": "MCDReforgedPlugins",
  "full_name": "AnzhiZhang/MCDReforgedPlugins",
  "html_url": "https://github.com/AnzhiZhang/MCDReforgedPlugins",
  "description": "MCDReforged Plugins",
  "archived": false,
  "stargazers_count": 99,
  "watchers_count": 99,
  "forks_count": 54,
  "readme": "# FastAPI\n\n[简体中文](https://github.com/AnzhiZhang/MCDReforgedPlugins/tree/master/src/fastapi_mcdr/readme_cn.md)\n\n> Provides HTTP API\n> \n> Allows plugins to provide a unified interface by mounting [sub-application](https://fastapi.tiangolo.com/advanced/sub-applications/).\n\n## Quick Start\n\nIn general, there are two things you need to do in your plugin:\n\n1. Check FastAPI's status when loading. If it's ready, directly mount the sub-application.\n2. Register a listener for the COLLECT event to  mount the sub-application when it becomes ready.\n\nSpecifically, you need to add the following code:\n\n```python\nfrom fastapi import FastAPI\n\napp = FastAPI()\n\n\n@app.get(\"/test\")\nasync def test():\n    return \"Hello, world!\"\n\n\ndef on_load(server, prev_module):\n    # mount if fastapi_mcdr is ready\n    fastapi_mcdr = server.get_plugin_instance('fastapi_mcdr')\n    if fastapi_mcdr is not None and fastapi_mcdr.is_ready():\n        mount_app(server)\n\n    # register event listener\n    server.register_event_listener(\n        fastapi_mcdr.COLLECT_EVENT,\n        mount_app\n    )\n\n\ndef on_unload(server):\n    # save plugin id and fastapi_mcdr instance\n    id_ = server.get_self_metadata().id\n    fastapi_mcdr = server.get_plugin_instance('fastapi_mcdr')\n\n    # unmount app\n    fastapi_mcdr.unmount(id_)\n\n\ndef mount_app(server):\n    # save plugin id and fastapi_mcdr instance\n    id_ = server.get_self_metadata().id\n    fastapi_mcdr = server.get_plugin_instance('fastapi_mcdr')\n\n    # mount app\n    fastapi_mcdr.mount(id_, app)\n```\n\nVisit <http://localhost:8080/docs> to view the API documentation, and visit <http://localhost:8080/plugin_id/docs> to view the sub application documentation for each plugin.\n\n## Technical Details\n\n### Loading\n\nIn theory, providing an HTTP API externally should be an optional feature. That's why checking FastAPI's status and registering an COLLECT event listener are necessary. The following diagram illustrates the process of loading FastAPI and custom plugins:\n\nLoad FastAPI first, then load custom plugins:\n\n```mermaid\nsequenceDiagram\n    participant FastAPI\n    participant Test\n\n    Note right of FastAPI: FastAPI Load\n    Note right of FastAPI: FastAPI Dispatch COLLECT Event\n\n    Note left of Test: Test Load\n\n    Test ->> FastAPI: Loaded?\n    FastAPI ->> Test: Yes!\n    Test ->> FastAPI: is_ready?\n    FastAPI ->> Test: Yes!\n    Test ->> FastAPI: Mount Sub-Application\n\n    Note left of Test: Test Register COLLECT Event\n```\n\nLoad custom plugins first, then load FastAPI:\n\n```mermaid\nsequenceDiagram\n    participant FastAPI\n    participant Test\n\n    Note left of Test: Test Load\n\n    Test ->> FastAPI: Loaded?\n    FastAPI ->> Test: No!\n\n    Note left of Test: Test Register COLLECT Event\n\n    Note right of FastAPI: FastAPI Load\n\n    FastAPI ->> Test: Dispatch COLLECT Event\n    Test ->> FastAPI: Mount Sub-Application\n```\n\nWith this design, you can achieve soft plugin dependency without worrying about the order of plugin loading. The following diagram shows the scenario of any plugin being reloaded:\n\n```mermaid\nsequenceDiagram\n    participant FastAPI\n    participant Test\n\n    Note right of FastAPI: FastAPI Reload\n\n    FastAPI ->> Test: Dispatch COLLECT Event\n    Test ->> FastAPI: Mount Sub-Application\n\n    Note left of Test: Test Reload\n\n    Test ->> FastAPI: Loaded?\n    FastAPI ->> Test: Yes!\n    Test ->> FastAPI: is_ready?\n    FastAPI ->> Test: Yes!\n    Test ->> FastAPI: Mount Sub-Application\n\n    Note left of Test: Test Register COLLECT Event\n```\n\n## Standards\n\n### COLLECT Event\n\nEvent name: `fastapi_mcdr.collect`\n\nAn instance of `PluginEvent` for this event is also exposed as `COLLECT_EVENT`.\n\n### Public Functions\n\n#### is_ready\n\nThe plugin's status if ready to mount. If forcefully mounted, it will raise a `RuntimeError`.\n\n#### mount\n\nArguments:\n\n- `plugin_id`: Plugin ID.\n- `app`: FastAPI App.\n\nThe sub-application will be mounted at the `/<plugin_id>` path, and the documentation can be viewed by visiting `/<plugin_id>/docs`.\n\nSee: [Sub Applications - Mounts](https://fastapi.tiangolo.com/advanced/sub-applications/)\n\n#### unmount\n\nArguments:\n\n- `plugin_id`: Plugin ID.\n\nUnmount the sub-application of the specified plugin.\n",
  "readme_url": "https://raw.githubusercontent.com/AnzhiZhang/MCDReforgedPlugins/master/src/fastapi_mcdr/readme.md",
  "license": {
    "key": "gpl-3.0",
    "name": "GNU General Public License v3.0",
    "spdx_id": "GPL-3.0",
    "url": "https://api.github.com/licenses/gpl-3.0"
  }
}