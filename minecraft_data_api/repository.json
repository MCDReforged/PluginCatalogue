{
  "url": "https://github.com/Fallen-Breath/MinecraftDataAPI",
  "name": "MinecraftDataAPI",
  "full_name": "Fallen-Breath/MinecraftDataAPI",
  "html_url": "https://github.com/Fallen-Breath/MinecraftDataAPI",
  "description": "A MCDReforged api plugin to get player data information and more",
  "archived": false,
  "stargazers_count": 19,
  "watchers_count": 19,
  "forks_count": 9,
  "readme": "# Minecraft Data API\n-------------\n\n[中文](https://github.com/MCDReforged/MinecraftDataAPI/blob/master/README_cn.md)\n\nA MCDReforged api plugin to get player data information and more\n\n## Dependency\n\n- `hjson` module\n\n## Usage\n\nDirectly `import` MinecraftDataAPI and just use it:\n\n```python\nimport minecraft_data_api as api\n\npos = api.get_player_info('Steve', 'Pos')\n```\n\nSuggestion: declare the dependency of MinecraftDataAPI in your plugin metadata:\n\n```python\nPLUGIN_METADATA = {\n\t'dependencies': {\n\t\t'minecraft_data_api': '*',\n\t}\n}\n```\n\n## Function list\n\nCheck the example plugin in the `examples` folder or read the code to get a more comprehensive understanding\n\n### convert_minecraft_json\n\n```python\ndef convert_minecraft_json(text: str)\n```\n\nConvert Minecraft style json format into a python object\n\nMinecraft style json format is something like these:\n\n- `Steve has the following entity data: [-227.5d, 64.0d, 12.3E4d]`\n- `[-227.5d, 64.0d, 231.5d]`\n- `Alex has the following entity data: {HurtByTimestamp: 0, SleepTimer: 0s, ..., Inventory: [], foodTickTimer: 0}`\n\nIt will automatically detect if there is a `<name> has the following entity data: `. If there is, it will erase it before converting\n\nArgs:\n- text: A data get entity or other command result that use Minecraft style json format\n\nReturn:\n- A parsed json result. It can be a `dict` / `list` / `int` / `float`\n\nExamples:\n\n- Input `Steve has the following entity data: [-227.5d, 64.0d, 231.5d]`, output `[-227.5, 64.0, 123000.0]`\n\n- Input `{HurtByTimestamp: 0, SleepTimer: 0s, Inventory: [], foodTickTimer: 0}`, output `{'HurtByTimestamp': 0, 'SleepTimer': 0, 'Inventory': [], 'foodTickTimer': 0}`\n\n### get_player_info\n\n```python\ndef get_player_info(player: str, data_path: str = '', *, timeout: Optional[float] = None)\n```\n\nExecute `data get entity <name> [<path>]` and parse the result\n\nArgs:\n- name: Name of the player who you want to get his/her info\n- path: An optional `path` parameter in `data get entity` command\n- timeout: The maximum time to wait the data result. Return `None` if time out. Default value `5`\n\nReturn:\n- A parsed json result. It can be a `dict`, a `list`, a `int` or a `None`\n\nPlease refer to the Player.dat page on minecraft wiki\n\n[player.dat format](https://minecraft.gamepedia.com/Player.dat_format)\n\n### get_player_coordinate\n\n```python\ndef get_player_coordinate(player: str, *, timeout: Optional[float] = None) -> Union[int or str]\n```\n\nUse `get_player_info` to query the `Pos` data of the player to get the player's coordinate. A `ValueError` will be risen if query failed\n\nIt will convert the return value into a named tuple `collections.namedtuple('Coordinate', 'x y z')` for easier use of the return value\n\n### get_player_dimension\n\n```\ndef get_player_dimension(player: str, *, timeout: Optional[float] = None) -> Coordinate\n```\n\nUse `get_player_info` to query the `Dimension` data of the player to get the player's dimension. A `ValueError` will be risen if query failed\n\nIt contains a dimension data convert. It will convert the dimension name in MC 1.16+ (e.g. `minecraft:overworld`) into the related integer\n\nDimension name mapping:\n\n```python\ndim_convert = {\n    'minecraft:overworld': 0,\n    'minecraft:the_nether': -1,\n    'minecraft:the_end': 1\n}\n```\n\nIf the dimension it gets is not in the mapping, for example it's a custom dimension, then it will return the name of the dimension directly\n\n### get_dimension_translation_text\n\n```\ndef get_dimension_translation_text(dim_id: int) -> RText\n```\n\nConvert the dimension id into a RTextTranslation object that can be translated by Minecraft. The mapping of the translation key is as follows\n\n```python\ndimension_translation = {\n    0: 'createWorld.customize.preset.overworld',\n    -1: 'advancements.nether.root.title',\n    1: 'advancements.end.root.title'\n}\n```\n\nIf the dimension id is not in the mapping, it will return a RText object contains the input id directly\n\nYou can safely use `api.get_dimension_translation_text(api.get_player_dimension('Steve'))` to get text component storing the dimension the player is in\n\n### get_server_player_list\n\n```python\ndef get_server_player_list(*, timeout: Optional[float] = None) -> Optional[Tuple[int, int, List[str]]]\n```\n\nReturn the player list information by executing /list command\n\nThe return value is a tuple with 3 element: the amount of current player, the player limit, and a list of names of online players. Return None if querying failed\n\nSee `examples/PlayerList.py` for example usage\n",
  "readme_url": "https://raw.githubusercontent.com/Fallen-Breath/MinecraftDataAPI/next/README.md",
  "license": {
    "key": "gpl-3.0",
    "name": "GNU General Public License v3.0",
    "spdx_id": "GPL-3.0",
    "url": "https://api.github.com/licenses/gpl-3.0"
  }
}