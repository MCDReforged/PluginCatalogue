{
  "schema_version": 1,
  "id": "cfgcmd",
  "authors": [
    "wangyupu"
  ],
  "repository": "https://github.com/wang-yupu/configCommand",
  "branch": "main",
  "related_path": ".",
  "labels": [
    "management"
  ],
  "introduction": {
    "en_us": "# configCommand / cfgcmd\n\n[简体中文](https://github.com/wang-yupu/configCommand/tree/main//README.md)\n[Link](https://cfgcmd.wangyupu.com)\n\n> Still translated by gpt-4o\n\nUse MCDR commands in the game to modify configurations of other plugins/Mods!\n\n**Version `1.3.1` supports online editor**\n\n## Permissions\n\nCurrently, the plugin allows all players with permissions to modify the configuration (MCDR level 4). This plugin can modify **all files that the user running the MCDR process has access to** (especially `root`), so **please control permissions or run the server in a container**.\n\n## Commands\n\n- `!!cfg env <path, starting from the MCDR root path, can be absolute/relative path> <config file> [optional: reader type]`: Set the target file modified by the executor\n- `!!cfg quit`: Clear the executor's target file\n- `!!cfg write`: Write to the target file\n- `!!cfg reload`: Reload the target file (overwrites all previous modifications)\n- `!!cfg info`: View file information\n\n---\n\n- `!!cfg set <key> <value>`: Set a key-value pair, where `<key>` uses `.` to separate paths in the configuration tree (see the example below). This command does not support relative paths like `..` in the `key`. See the \"Types\" section below for types.\n- `!!cfg setTyped <key> <type> <value>`: See the \"Types\" section below. If the value cannot be interpreted as the specified type, it will default to `STRING`.\n- `!!cfg rm <key>`: Delete the key's content\n- `!!cfg mv <sourceKey> <destKey>`: Move or rename\n- `!!cfg cp <sourceKey> <destKey>`: Copy and paste\n- `!!cfg cd <key>`: Since configuration files are tree-structured, this command provides a file-system-like `cd` operation. Not available when the reader is `plain`.\n- `!!cfg ls [optional: page] [require prior key]: View the content of the current object. When the reader is `plain`, the entire file is printed. Each page contains 10 lines.\n- `!!cfg lsLong [required: page] [optional: lines per page] [require prior key]`: Same as the previous command\n\n---\n\n- `!!cfg lsDir <path>`: View a list of files starting from the MCDR root directory\n- `!!cfg rmFile <file>`: Delete a file (**cannot be undone**)\n- `!!cfg touchFile <file>`: Create an **empty** file\n\n---\n\n- `!!cfg editor`: Open the online editor for the current file, requires setting `enableCloud` to `true`\n- `!!cfg editorApply`: Synchronize the modified configuration file from the cloud\n- `!!cfg editorDelete`: Delete the cloud session\n\n> If upgrading from version `1.3.1` or below, you need to manually add `enableCloud: true` to your configuration file to use the online editor.\n\n---\n\n> After executing `!!cfg env ...`, the file will not be locked  \n> Executing `!!cfg info` will display the current file information  \n> Executing `!!cfg ls` will print the content of the object where the pointer is located  \n> The reader is determined by the file extension. Files with no extension or unknown extensions will use the `plain` reader  \n> When the reader is `plain`, the `<key>` parameter specifies the line number  \n> If the `<key>` contains spaces and is followed by other parameters, wrap it in double quotes. Use `\\` to escape. See [QuotableText](https://docs.mcdreforged.com/zh-cn/latest/code_references/command.html#mcdreforged.command.builder.nodes.arguments.QuotableText)\n\n### Number Types\n\n`setTyped` can specify the type of a value. The following types are available, and some types have special behaviors:\n\n- `STRING`: Basic string\n- `INT`: Number, including floating-point numbers (`float`)\n- `BOOL`: Boolean value, case-insensitive, but must be either `T`/`True` (true) or `F`/`False` (false)\n- `LIST`: List\n- `OBJECT`: JS `Object`, Python `dict`, YAML `mapping`\n- `AUTO`: This type directly uses the `set` command\n\n#### Special Behavior for `LIST` and `OBJECT`\n\n##### `LIST`\n\nThe input value is split by commas, and you can escape commas with `\\` to avoid incorrect splitting. After splitting, each item will be type-inferred and a list will be created. If the value is empty, an empty list is created.\n\n##### `OBJECT`\n\nSimilar to `LIST`, the input value is split by commas and then split into key-value pairs using `:`. Commas can also be escaped with `\\` to avoid incorrect splitting. The items will be type-inferred (both keys and values) and an `OBJECT` will be created. If the value is empty, an empty `OBJECT` will be created.\n> It is not recommended to use `setTyped OBJECT ...`, as it can encounter input restrictions in chat. It is better to use it only for creating empty `OBJECT`s.\n\n#### Type Inference\n\nAll inferred types follow a common logic:\n\n1. If the value doesn't exist or is `None` (case-sensitive), it will start automatic inference, otherwise it will use the existing type.\n2. If the value (in uppercase) matches one of `T`, `TRUE`, `F`, or `FALSE`, it is a boolean value.\n3. If the value contains non-numeric characters (other than decimal points, negative signs, or double quotes), it is a string.\n4. If the value is enclosed in double quotes, it is a string representation of a number. Remove the surrounding double quotes and proceed to step 5.\n5. If it consists only of numbers (including possible decimals or signs), it is considered a number.\n6. Otherwise, it is a string.\n\n> `LIST` and `OBJECT` are not involved in this inference process, so automatic inference won't result in `LIST` or `OBJECT`.\n\n### Example\n\nOriginal configuration file:\n\n```json\n1  {\n2      \"foo\": 123,\n3      \"bar\": {\n4          \"barFoo\": \"?\",\n5          \"barBar\": {\n6              \"barBarFoo\": 456\n7          }\n8      },\n9      \"buzz\": [\n10         \"wangyupu\",\"zzfx1166\"\n11     ]\n12 }\n```\n\nCommands (in order):\n\n1. `!!cfg env \"config/foo/\" bar.json`: Open the file\n2. `!!cfg set foo 1231`: Set the value on line 2 to 1231\n3. `!!cfg set bar.barFoo \"!\": Set the value on line 4 to \"!\"\n4. `!!cfg rm buzz.1`: Remove the second item in the list on line 10 (0-based index)\n5. `!!cfg cd bar.barBar`: Change the pointer to the object on line 5\n6. `!!cfg set barBarFoo 789`: Set the value on line 6 to 789\n7. `!!cfg write`: Write the file\n8. `!!cfg quit`: Exit the file\n\nModified configuration file:\n\n```json\n1  {\n2      \"foo\": 1231,\n3      \"bar\": {\n4          \"barFoo\": \"!\",\n5          \"barBar\": {\n6              \"barBarFoo\": 789\n7          }\n8      },\n9      \"buzz\": [\n10         \"wangyupu\"\n11     ]\n12 }\n```\n\n## Plugin Configuration\n\n```yaml\nownerPlayer: PlayerName\ncfgCmdPermission: 4\nallowModifyConfig: true\nallowOutBound: false\nenableLog: true\nonlyOwnerPlayer: false\n```\n\n- `ownerPlayer`: The player specified here bypasses all security controls. Leave it empty to apply permission control to all authorized players.\n- `allowModifyConfig`: Determines whether the configuration of **this plugin (`cfgcmd`)** can be modified.\n- `allowOutBound`: Determines whether accessing files outside the MCDR root path is allowed. When set to `false`, only files within the MCDR path are accessible.\n- `enableLog`: Determines whether to enable logging, which will be saved in the *MCDR root path*/logs/cfgcmdLogs/<YYYY>-<mm>-<dd>_<COUNT>.log.\n- `onlyOwnerPlayer`: Determines whether only the specified `ownerPlayer` is allowed to use this plugin.\n\n> `allowModifyConfig` defaults to `true` to allow administrators to safely configure the plugin when they cannot access the backend. It is recommended to manually set it to `false` after installation.\n\n## Supported Configuration File Formats\n\n- `json`\n- `yaml` (`yml`)\n- `toml`\n- Plain text\n",
    "zh_cn": "\n# configCommand / cfgcmd\n\n[English](https://github.com/wang-yupu/configCommand/tree/main//README_en.md)  \n[Link](https://cfgcmd.wangyupu.com)\n\n在游戏内使用MCDR命令修改其它插件/Mod的配置！\n\n**`1.3.1`版本支持在线编辑器!**\n\n## 权限\n\n目前插件对所有配置内允许的玩家允许使用(MCDR 4级权限)。此插件可以修改**运行MCDR进程的用户有权修改的所有文件**(尤其是`root`)，因此**请控制好权限或者将服务端放入容器运行**。\n\n## 命令\n\n- `!!cfg env <路径，以MCDR根路径开始，可用绝对/相对路径> <配置文件> [可选: 读写器类型]`: 将执行者修改的目标文件设置为对应文件\n- `!!cfg quit`: 清空执行者的目标文件\n- `!!cfg write`: 写入目标文件\n- `!!cfg reload`: 重载目标文件(会覆盖已经进行的所有修改)\n- `!!cfg info`: 查看文件信息\n\n---  \n\n- `!!cfg set <key> <value>`: 设置键值对，`<key>`中`.`分割的键将被当做配置树的路径解释(具体见下文示例)，此命令的`key`不支持`..`此类相对路径。类型见下方类型章节\n- `!!cfg setTyped <key> <type> <value>`: 具体见下方类型章节。若值无法被解释为指定的类型，则使用`STRING`\n- `!!cfg rm <key>`: 删除键对应的内容\n- `!!cfg mv <sourceKey> <destKey>`: 移动，也可以当重命名使用\n- `!!cfg cp <sourceKey> <destKey>`: 复制粘贴\n- `!!cfg cd <key>`: 因为配置文件是树状结构，所以就提供一个类似文件系统操作的`cd`指令。在读写器为`plain`时不可用\n- `!!cfg ls [可选: page] [需要前项存在: key]`: 查看当前Object内容。在读写器为`plain`时打印全文。每10行算一页\n- `!!cfg lsLong [必选: page] [可选: linePerPage] [需要前项存在: key]`: 同上\n\n---  \n\n- `!!cfg lsDir <路径>`: 以MCDR目录为根目录查看文件列表\n- `!!cfg rmFile <文件>`: 删除文件 (**无法撤销**)\n- `!!cfg touchFile <文件>`: 创建**空**文件\n\n---  \n\n- `!!cfg editor`: 打开当前文件的在线编辑器，需要配置`enableCloud`为`true`\n- `!!cfg editorApply`: 从云端同步已经修改的配置文件\n- `!!cfg editorDelete`: 删除云端的会话\n\n> 从`1.3.1`版本以下升级过来的，需要手动为配置文件添加`enableCloud`为`true`才能使用在线编辑器\n\n---  \n\n> 执行`!!cfg env ...`后，不会占用文件  \n> 执行`!!cfg info`给出当前文件信息  \n> 执行`!!cfg ls`打印指针所在Object的内容  \n> 读写器根据文件后缀名判断。没有后缀名或者未知后缀名的会选择使用`plain`读写器  \n> 若读写器为`plain`，`<key>`参数指定的就是行号  \n> 若`<key>`包含空格且后面还有参数，用英文双引号把它括住。用`\\`可以转义。具体见[QuotableText](https://docs.mcdreforged.com/zh-cn/latest/code_references/command.html#mcdreforged.command.builder.nodes.arguments.QuotableText)\n\n### 数值类型\n\n`setTyped`可以指定数值的类型，以下类型可用，部分类型有特殊的行为:\n\n- `STRING`: 基本的字符串\n- `INT`: 数字，包含浮点数(`float`)\n- `BOOL`: 布尔值，数值大小写不敏感，但是输入必须为`T``True`(解析为真)、`F``False`(解析为假)\n- `LIST`: 列表\n- `OBJECT`: JS的`Object`，Python的`dict`，YAML的`mapping`\n- `AUTO`: 用这个类型 = 直接用`set`子命令\n\n#### `LIST`与`OBJECT`的特殊行为\n\n##### `LIST`\n\n它会将输入的值用英文逗号分开，可以使用`\\`转义逗号避免错误的分割。被分割后的项目会自动进行类型推导并创建一个列表。若值是空的，则创建一个空列表\n\n##### `OBJECT`\n\n类似`LIST`，它会将输入的值用英文逗号分开，然后再用`:`分割键值对。可以使用`\\`转义逗号避免错误的分割。被分割后的项目会自动进行类型推导(无论是键还是值)并创建一个`OBJECT`。若值是空的，则创建一个空`OBJECT`\n> 实际不推荐使用`setTyped OBJECT ...`，因为它会遇到聊天框输入限制。推荐用于创建空的`OBJECT`\n\n#### 类型推导\n\n所有被推导的类型共享一个逻辑:\n\n1. 判断原先值是否不存在或值为`None`(大小写敏感) ? 开始自动推导 : 原有类型可用则以原有类型继续，否则开始自动推导\n2. 将数值转换为纯大写后是否为[`T`,`TRUE`,`F`,`FALSE`]中的一项 ? 是布尔值，结束 : 继续\n3. 包含非数字字符(小数点、负号、双引号除外) ? 是一个字符串，结束 : 是一个数字，跳到第4步\n4. 判断值被双引号括住 ? 是一个字符串式的数字，且去掉开头与结尾的双引号并进行5步的转换，结束 : 继续判断\n5. 全是数字(以及可能包含的小数点和开头符号) ? 是数字(小数点取最靠后的那个)，结束 : 这是一个字符串\n\n> `LIST`与`OBJECT`不参与此推导过程，因此自动推导不可能推出`LIST`与`OBJECT`\n\n### 示例\n\n原始配置文件:\n\n```json\n1  {\n2      \"foo\": 123,\n3      \"bar\": {\n4          \"barFoo\": \"?\",\n5          \"barBar\": {\n6              \"barBarFoo\": 456\n7          }\n8      },\n9      \"buzz\": [\n10         \"wangyupu\",\"zzfx1166\"\n11     ]\n12 }\n```\n\n命令(有顺序):\n\n1. `!!cfg env \"config/foo/\" bar.json`: 打开文件\n2. `!!cfg set foo 1231`: 设置第2行的值为1231\n3. `!!cfg set bar.barFoo \"!\"`: 设置第4行的值为\"!\"\n4. `!!cfg rm buzz.1`: 删除第10行列表的第二项 (0-based index)\n5. `!!cfg cd bar.barBar`: 切换目前指针到第5行的Object\n6. `!!cfg set barBarFoo 789`: 修改第6行的值为789\n7. `!!cfg write`: 写入文件\n8. `!!cfg quit`: 离开文件\n\n修改后配置文件:\n\n```json\n1  {\n2      \"foo\": 1231,\n3      \"bar\": {\n4          \"barFoo\": \"!\",\n5          \"barBar\": {\n6              \"barBarFoo\": 789\n7          }\n8      },\n9      \"buzz\": [\n10         \"wangyupu\"\n11     ]\n12 }\n```\n\n## 插件配置\n\n```yaml\nownerPlayer: 玩家名称\ncfgCmdPermission: 4\nallowModifyConfig: true\nallowOutBound: false\nenableLog: true\nonlyOwnerPlayer: false\nenableCloud: true\n```\n\n`ownerPlayer`指定的玩家绕过所有安全控制措施。将其留空以对所有有权限的玩家进行权限控制  \n`allowModifyConfig`指定是否允许修改**本插件(`cfgcmd`)的配置**  \n`allowOutBound`指定是否允许离开`MCDR`根路径，为`false`时只能访问`MCDR`路径下的文件  \n`enableLog`指定是否启用记录功能，记录保存于*MCDR根路径*`/logs/cfgcmdLogs/<YYYY>-<mm>-<dd>_<COUNT>.log`  \n`onlyOwnerPlayer`指定是否只允许被指定的`ownerPlayer`才能使用此插件\n\n> `allowModifyConfig`默认为`true`是为了管理员于无法访问后台的情况下也能对插件进行安全配置，建议安装后手动将其改为`false`  \n> `enableCloud`在`1.3.1`版本前不存在，因此升级到`1.3.1+`版本时需要自行添加此配置以允许编辑器会话\n\n## 支持的配置文件格式\n\n- `json`\n- `yaml`(`yml`)\n- `toml`\n- 纯文本\n"
  },
  "introduction_urls": {
    "zh_cn": "https://raw.githubusercontent.com/wang-yupu/configCommand/main/README.md",
    "en_us": "https://raw.githubusercontent.com/wang-yupu/configCommand/main/README_en.md"
  }
}