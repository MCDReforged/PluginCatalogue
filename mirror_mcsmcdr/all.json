{
  "meta": {
    "schema_version": 4,
    "id": "mirror_mcsmcdr",
    "name": "MirrorMcsmcdR",
    "version": "1.4.1",
    "link": "https://github.com/LazyAlienServer/MirrorMcsmcdR",
    "authors": [
      "tanh_Heng"
    ],
    "dependencies": {
      "mcdreforged": ">=2.6.0"
    },
    "requirements": [
      "xxhash>=3"
    ],
    "description": {
      "en_us": "A mirror server manager MCDR plugin, based on MCSManager.",
      "zh_cn": "一个多功能的完善的控制镜像服的MCDR插件"
    }
  },
  "plugin": {
    "schema_version": 1,
    "id": "mirror_mcsmcdr",
    "authors": [
      "tanh_Heng"
    ],
    "repository": "https://github.com/LazyAlienServer/MirrorMcsmcdR",
    "branch": "main",
    "related_path": ".",
    "labels": [
      "management"
    ],
    "introduction": {
      "en_us": "# MirrorMcsmcdR\n\n[中文](https://github.com/LazyAlienServer/MirrorMcsmcdR/tree/main/./README.md) | English\n\nAn **advance** plugin for [MCDR](https://github.com/Fallen-Breath/MCDReforged) that can control mirror servers and synchronize files in various ways.\n\n## Features\n\n- The plugin supports controlling mirror servers through [MCSManager](https://github.com/MCSManager/MCSManager), and can also control mirror servers directly through the terminal or RCON without relying on MCSM (`v1.3.0+`)\n  + MCSM Control: Supports `MCSM-v9.9.0` `MCSM-v10.2.1+`\n  + Terminal or RCON Control: Supports `Windows` `Linux` systems\n- Comprehensive **multi-mirror server** control operations: obtaining running status, starting server, stoping server, force termination and synchronization\n- Hash-based file synchronization, only synchronizes files that are different between the mirror server and the source server\n- Highly customizable and friendly configuration file, only the changed values need to be written when configuring multiple mirror servers\n\n**[Note]** This plugin does not provide server creation or management functionality. Please use this plugin after the mirror server is created and the MCSManager instance is created. Similarly, this plugin does not provide prompts for the successful start or stop of the mirror server, and it is recommended to use it in conjunction with plugins such as vchat.\n\n## Dependencies\n\n**Python**\n\n`xxhash>=3`\n\n**System**\n\nWhen using the [terminal](#terminal-configuration-for-starting-the-mirror-server-terminal-through-the-command-line) to start the mirror server and the system is `Linux`: `screen` is required\n\n## Commands\n\nThe default command prefix is `!!mirror`. When controlling multiple mirror servers, the command prefix will be used to distinguish, see [Configuration File](#mirror)\n\n`!!mirror` Displays command help\n\n`!!mirror help` Displays command help\n\n`!!mirror status` Gets the running status of the mirror server instance, the status is unknown/stopped/stopping/starting/running\n\n`!!mirror start` Starts the mirror server instance\n\n`!!mirror stop` Stops the mirror server instance\n\n`!!mirror kill` Forcefully terminates the mirror server instance\n\n`!!mirror sync` Synchronizes files\n\n`!!mirror confirm` Confirms the operation of a certain command\n\n`!!mirror reload` Hot reloads the configuration file for the specified mirror server\n\n## Configuration File\n\n**This configuration file is quite long**. We recommend that you read the [Quick Start](https://github.com/LazyAlienServer/MirrorMcsmcdR/tree/main//docs/quickstart_en.md) to complete the preliminary configuration. If you need to find an explanation for a specific configuration item, you can read the following.\n\nThe configuration file supported hot reloading in `v1.1.0`, and at the same time added a more comprehensive attribute completion function. When a new version of the configuration file adds an option, the plugin will automatically fill in the default value in your old configuration file, without the need for manual addition.\n\n```jsonc\n{\n    \"!!mirror\": {\n        \"mcsm\": {/* MCSManager configuration */},\n        \"terminal\": {/* Configuration for starting the mirror server terminal through the command line */},\n        \"rcon\": {/* RCON configuration */},\n        \"sync\": {/* Save synchronization configuration */},\n        \"command\": {\n            \"permission\": {/* Command permission configuration */},\n            \"action\": {/* Command behavior configuration */}\n        },\n        \"display\": {/* Display configuration */}\n    }\n}\n```\n\n### \"!!mirror\"\nUnder this parameter, all configurations for the mirror server are configured, and this parameter is also the command prefix for controlling the mirror server.\n\nTo add a new mirror server, such as controlling mirror server 2 through `!!mirror2`, simply add another `\"!!mirror2\"` in the configuration file.\n\nThe parameters set for the first mirror server in the configuration file will also be set as the default configuration. In the subsequent mirror server configuration files, only the changed parameter values need to be written.\n\n**Example**\n\nMirror server 1 is `!!mirror`, which is also the default configuration file for other mirror servers, then put `!!mirror` in the first place in the configuration file.\n\nControl mirror server 2 through `!!mirror2`, and set the instance id of `!!mirror2` to `abc123`, change the server name of `!!mirror2` to `Mirror2`\n```jsonc\n{\n    \"!!mirror\": {\n        // ...\n    },\n    \"!!mirror2\": {\n        \"mcsm\": {\n            \"uuid\": \"abc123\"\n        },\n        \"display\": {\n            \"server_name\": \"Mirror2\"\n        }\n    }\n}\n```\nIn it, the parameters not set in `!!mirror2` will automatically inherit from the first set `!!mirror`, for example, `!!mirror2` did not set the `url` of `mcsm`, then it will inherit from the `url` of `mcsm` in `!!mirror`, that is `\"http://127.0.0.1:23333/\"`\n\nFor a complete example, see [Multi-mirror Server Configuration File Example](#example-of-multi-mirror-server-configuration-file)\n\n<br>\n\n### mcsm: MCSManager Configuration\nIf you have any questions about this configuration section, please refer to the [MCSManager Documentation](https://docs.mcsmanager.com/#/zh-cn/apis/readme)\n```jsonc\n\"mcsm\": {\n    \"enable\": false,\n    \"url\": \"http://127.0.0.1:23333/\", \n    \"uuid\": null,\n    \"remote_uuid\": null,\n    \"apikey\": null\n}\n```\nAfter enabling MCSM, the terminal and RCON will be disabled.\n\n**enable** `bool`\n- Whether to enable MCSM. You need to set this option to `true` after completing the configuration of this section.\n\n**url** `str`\n- The access address of the MCSManager panel, that is, the address for requesting the API.\n\n**uuid** `str`\n- The ID of the server instance, that is, the UID displayed by the instance.\n\n**remote_uuid** `str`\n- The ID of the remote node, that is, the GID displayed by the instance.\n\n**apikey** `str`\n- The key required to call the API interface, which can usually be viewed in the user interface.\n\n<br>\n\n### terminal: Configuration for starting the mirror server terminal through the command line\n```jsonc\n\"terminal\": {\n    \"enable\": false,\n    \"launch_path\": \"./Mirror\",\n    \"launch_command\": \"python -m mcdreforged\",\n    \"port\": null,\n    \"terminal_name\": \"Mirror\",\n    \"regex_strict\": false,\n    \"system\": null\n}\n```\nUnder Windows system, the plugin will create a new terminal to run the mirror server; under Linux system, the plugin will create a new screen to run the mirror server. After the mirror server stops, the terminal or screen will be closed automatically.\n\nIf you cannot start the mirror server with this command, try the following steps for inspection. Among them, `terminal_name` `launch_command` are the values of the corresponding keys in the configuration file.\n1. Execute `launch_command` under `launch_path` and confirm that it can start the mirror server successfully\n2. Linux users check if `screen` is installed, Windows users check if `python` command can start Python successfully in the terminal\n3. If the above two suggestions cannot be resolved, then execute the complete command corresponding to the system in the root directory of the current server's MCDR, and check the command echo\n   - Linux `cd \"{launch_path}\"&&screen -dmS {terminal_name}&&screen -x -S {terminal_name} -p 0 -X stuff \"{launch_command}&&exit\\n\"`\n   - Windows `cd \"{launch_path}\"&&start cmd.exe cmd /C python -c \"import os;os.system('title {terminal_name}');os.system('{launch_command}')\"`\n\nNote: Under Linux system, the plugin can close the mirror server through the screen. Under Windows system, you must set MCSM or RCON to close the mirror server through the plugin.\n\n**enable** `bool`\n- Whether to enable the terminal. when MCSM is not enabled and this option is `true`, the mirror server will be started through the terminal.\n\n**launch_path** `str`\n- The path where the startup command is executed, usually the directory where the mirror server is located.\n\n**launch_command** `str`\n- The startup command that needs to be executed, if a simple startup command cannot meet your requirements, you can create a `.bat` (or `.sh`) file and write the startup command in it, and then execute the file.\n\n**port** `int`\n- The port on which the mirror server runs, the plugin will check the running status of the mirror server by checking the port status.\n\n**terminal_name** `str`\n- The title of the new terminal or the name of the new screen, which is convenient for the operation and maintenance of the mirror server.\n\n**regex_strict** `bool`\n- Whether to continue to verify if the process name must be `java.exe` after finding the port when checking the running status of the mirror server. Generally, there is no need to turn it on. If different processes may run on the same port at different times, for example, during a certain period, Minecraft runs on port `port`, and during another period, another program runs on port `port` while Minecraft is not running, then to a certain extent this option can avoid misjudging other processes as java processes.\n\n**system** `str`\n- System type, if it is `null`, the system type will be automatically obtained. Optional: `Linux` `Windows` (the first letter should be capitalized)\n\n<br>\n\n### rcon: RCON Configuration\n```jsonc\n\"rcon\": {\n    \"enable\": false,\n    \"address\": null,\n    \"port\": null,\n    \"password\": null\n}\n```\n**enable** `bool`\n- Whether to enable RCON. When MCSM is not enabled, the plugin will execute the `stop` command and obtain the status of the mirror server through RCON. If both RCON and the terminal are enabled at the same time, the plugin will first check the status of RCON to obtain the status of the mirror server. If RCON is not connected, it will check the status through the port. If the status of RCON does not match the status of the port, a prompt will be given.\n\n**address** `str`\n- The connection address of RCON, does not include the port.\n\n**port** `int`\n- The connection port of RCON\n\n**password** `str`\n- The connection password of RCON\n\n<br>\n\n### sync: Configuration file related to file synchronization\n```jsonc\n\"sync\": {\n    \"world\": [\n\t\"world\"\n    ],\n    \"source\": \"./server\",\n    \"target\": [\n        \"./Mirror/server\"\n    ],\n    \"ignore_inexistent_target_path\": false,\n    \"concurrency\": 4,\n    \"ignore_files\": [\n        \"session.lock\"\n    ]\n}\n```\n\nIn `sync`, `./` refers to the `MCDReforged` root directory where the server is located.\n\n```\nmcdr_root (./)\n ├─ config\n ├─ logs\n ├─ plugins\n ├─ server (./server)\n |   └─ world\n └─ Mirror\n     └─ server (./Mirror/server)\n         └─ world\n```\n\n**world** `list`\n- The directory that needs to be synchronized, it needs to be added when there are multiple world files in the archive.\n\n**source** `str`\n- The source server directory, which should usually be the [working directory](https://mcdreforged.readthedocs.io/en/latest/configuration.html#working-directory) of MCDR, that is, the default `server` directory. Files are synchronized from `source/world`  to `target/world`\n\n**target** `str, list`\n- The target server directory, you can only write a string if there is only one directory, and a list is needed for multiple directories. A copy of the source directory files will be synchronized for each target directory. By default, the MCDR working directory of the mirror server is located in the `Mirror` directory under the current MCDR root directory.\n\n**ignore_inexistent_target_path** `bool`\n- If a target server directory does not exist, it will be skipped when set to `false`. When set to `true`, the directory will be created and synchronization will continue.\n\n**concurrency** `int`\n- The number of threads performing hash calculations during synchronization.\n\n**ignore_files** `list`\n- Files that are not synchronized, if you use the `carpet` mod and the `plus-carpet-addition(PCA)` mod, it is recommended to add `\"carpet.conf\"` `\"pca.conf\"`\n\n<br>\n\n### command: Command Configuration\n\n```jsonc\n\"command\": {\n    \"permission\": {/* Command permission configuration */},\n    \"action\": {/* Command behavior configuration */}\n}\n```\n\n<br>\n\n### permission: Command Permission Configuration\n```jsonc\n\"permission\": {\n    \"status\": 0,\n    \"start\": 0,\n    \"stop\": 2,\n    \"kill\": 3,\n    \"sync\": 2,\n    \"confirm\": 0,\n    \"abort\": 0\n}\n```\n`int`\n- The minimum MCDR permission level required to execute each command\n\n<br>\n\n### action: Command Behavior Configuration\n```jsonc\n\"action\": {\n    \"status\": {\n        \"require_confirm\": false\n    },\n    \"start\": {\n        \"require_confirm\": false\n    },\n    \"stop\": {\n        \"require_confirm\": true\n    },\n    \"kill\": {\n        \"require_confirm\": true\n    },\n    \"sync\": {\n        \"ensure_server_closed\": true,\n        \"auto_server_restart\": false,\n        \"check_status_interval\": 5,\n        \"max_attempt_times\": 3,\n        \"save_world\": {/* Save world configuration */},\n        \"require_confirm\": true\n    },\n    \"confirm\": {\n        \"timeout\": 30,\n        \"cancel_anymsg\": true\n    },\n    \"abort\": {\n        \"operator\": \"everyone\"\n    }\n}\n```\n\n### General Configuration\n\n**require_confirm** `bool`\n- When this option is `true`, the command `!!mirror confirm` needs to be entered to confirm the operation after executing the command\n\n### sync Configuration\n**ensure_server_closed** `bool`\n- When this option is `true`, synchronization will check whether the mirror server has stopped. When this option is `false`, synchronization will be carried out directly regardless of whether the mirror server has stopped or not.\n\n**auto_server_restart** `bool`\n- This option only takes effect when `ensure_server_closed` is `true`. When this option is `true`, if the mirror server is not stopped during synchronization, it will attempt to automatically stop the mirror server, perform synchronization, and automatically restart the mirror server after the synchronization is completed.\n\n**check_status_interval** `int`\n- This option only takes effect when `auto_server_restart` is in effect. After stopping the mirror server during synchronization, the plugin needs to confirm whether the mirror server has stopped. This option is the time interval for checking the status of the mirror server.\n\n**max_attempt_times** `int`\n- This option only takes effect when `auto_server_restart` is in effect. The number of attempts to check the status of the mirror server, after exceeding this number of attempts, it will no longer attempt to check the status of the mirror server, and output `automatic shutdown failed` and the current status information of the mirror server. Equivalent to the timeout time `timeout = check_status_interval * max_attempt_times`\n\n**save_world** Save world configuration *Generally no need to change*\n```jsonc\n\"save_world\": {\n    \"turn_off_auto_save\": true,\n    \"commands\": {\n        \"save_all_worlds\": \"save-all flush\",\n        \"auto_save_off\": \"save-off\",\n        \"auto_save_on\": \"save-on\"\n    },\n    \"saved_world_regex\": \"^Saved the game$\",\n    \"save_world_max_wait_sec\": 60\n}\n```\n**turn_off_auto_save** `bool`\n- Turn off auto save when saving the world\n\n**commands** Related commands\n- **save_all_worlds** `str`\n  + Command to save the world\n- **auto_save_off** `str`\n  + Command to turn off auto save\n- **auto_save_on** `str`\n  + Command to turn on auto save\n\n**saved_world_regex** `str`\n- Regular expression to match the server \"world saved\" log\n\n**save_world_max_wait_sec** `int`\n- The maximum waiting time (seconds) for saving the world. After the timeout it will skip saving the world and perform synchronization\n\n### confirm Configuration\nPlayers can only confirm the commands they have executed\n\n**timeout** `int`\n- Command that needs confirmation will be canceled after the number of seconds. If the player has not taken any action after executing a command, the command will be canceled automatically.\n\n**cancel_anymsg** `bool`\n- If the player sends a message other than the `confirm` command after executing a command, the command operation will be canceled automatically. In addition, if the player executes another command corresponding to the mirror server after executing a command, the previously executed command will be canceled too.\n\n### abort Configuration\n~This feature is still under development~\n\n<br>\n\n### display: Display Configuration\n```jsonc\n\"display\": {\n    \"server_name\": \"Mirror\"\n}\n```\n**server_name** `str`\n- The name of the \"mirror server\", used to distinguish between different mirror servers in the display\n\n<br>\n\n### Example of Multi-mirror Server Configuration File\n\n```jsonc\n{\n    \"!!mirror\": {\n        \"mcsm\": {\n            \"enable\": true,\n            \"url\": \"http://127.0.0.1:23333/\",\n            \"uuid\": \"71154??????????0a1a2f4dd90695609\",\n            \"remote_uuid\": \"6e927??????????999f0e66bc404071b\",\n            \"apikey\": \"b8f???????????????????????????ade\"\n        },\n        \"terminal\": {\n            \"enable\": false,\n            \"launch_path\": \"./Mirror\",\n            \"launch_command\": \"python -m mcdreforged\",\n            \"port\": null,\n            \"terminal_name\": \"Mirror\",\n            \"regex_strict\": false,\n            \"system\": null\n        },\n        \"rcon\": {\n            \"enable\": false,\n            \"address\": null,\n            \"port\": null,\n            \"password\": null\n        },\n        \"sync\": {\n            \"world\": [\n                \"world\"\n            ],\n            \"source\": \"./server\",\n            \"target\": [\n                \"./Mirror/server\"\n            ],\n            \"ignore_inexistent_target_path\": false,\n            \"concurrency\": 4,\n            \"ignore_files\": [\n                \"session.lock\"\n            ]\n        },\n        \"command\": {\n            \"permission\": {\n                \"status\": 0,\n                \"start\": 0,\n                \"stop\": 2,\n                \"kill\": 3,\n                \"sync\": 2,\n                \"confirm\": 0,\n                \"abort\": 0\n            },\n            \"action\": {\n                \"status\": {\n                    \"require_confirm\": false\n                },\n                \"start\": {\n                    \"require_confirm\": false\n                },\n                \"stop\": {\n                    \"require_confirm\": true\n                },\n                \"kill\": {\n                    \"require_confirm\": true\n                },\n                \"sync\": {\n                    \"ensure_server_closed\": true,\n                    \"auto_server_restart\": true,\n                    \"check_status_interval\": 5,\n                    \"max_attempt_times\": 3,\n                    \"save_world\": {\n                        \"turn_off_auto_save\": true,\n                        \"commands\": {\n                            \"save_all_worlds\": \"save-all flush\",\n                            \"auto_save_off\": \"save-off\",\n                            \"auto_save_on\": \"save-on\"\n                        },\n                        \"saved_world_regex\": \"^Saved the game$\",\n                        \"save_world_max_wait_sec\": 60\n                    },\n                    \"require_confirm\": true\n                },\n                \"confirm\": {\n                    \"timeout\": 30,\n                    \"cancel_anymsg\": true\n                },\n                \"abort\": {\n                    \"operator\": \"everyone\"\n                }\n            }\n        },\n        \"display\": {\n            \"server_name\": \"Mirror\"\n        }\n    },\n    \"!!mirror2\": {\n        \"mcsm\": {\n            \"uuid\": \"83011??????????49c1133fc08a41b80\"\n        },\n        \"sync\": {\n            \"target\": [\n                \"./Mirror2/server\"\n            ]\n        },\n        \"display\": {\n            \"server_name\": \"Mirror2\"\n        }\n    },\n    \"!!mirror3\": {\n        \"mcsm\": {\n            \"enable\": false\n        },\n        \"sync\": {\n            \"target\": [\n                \"./Mirror3/server\"\n            ]\n        },\n        \"terminal\": {\n            \"enable\": true,\n            \"launch_path\": \"./Mirror3\",\n            \"port\": 30002,\n            \"terminal_name\": \"Mirror3\"\n        },\n        \"rcon\": {\n            \"enable\": true,\n            \"address\": \"127.0.0.1\",\n            \"port\": 31002,\n            \"password\": \"p@ssw0rd\"\n        }\n    }\n}\n```\n\n## Acknowledgements\n\n- Hash comparison idea / [better_backup](https://github.com/z0z0r4/better_backup)\n- Configuration file permission configuration idea / [PrimeBackup](https://github.com/TISUnion/PrimeBackup)\n- Save world idea / [QuickBackupM](https://github.com/TISUnion/QuickBackupM)\n\n## ToDo\n\n- [x] Command execution confirmation\n- [ ] Command execution delay\n- [ ] Prohibit synchronization `!!mirror sync enable/disable reason`\n- [x] language file\n- [ ] Command disable\n- [x] RCON support\n- [x] Start server through command line without MCSM\n- [ ] Linux/Windows execute `kill` command through terminal\n- [ ] Display history synchronization records\n",
      "zh_cn": "# MirrorMcsmcdR\n\n中文 | [English](https://github.com/LazyAlienServer/MirrorMcsmcdR/tree/main/./README_en.md)\n\n一个**超级完善的**[MCDR](https://github.com/Fallen-Breath/MCDReforged)插件，可通过多种方式对镜像服进行控制与进行文件同步\n\n## 特性\n\n- 插件支持通过[MCSManager](https://github.com/MCSManager/MCSManager)控制镜像服，也可以不依赖MCSM，直接通过终端或RCON对镜像服进行控制（`v1.3.0+`）\n  + MCSM控制：支持`MCSM-v9.9.0` `MCSM-v10.2.1+`\n  + 终端或RCON控制：支持`Windows` `Linux`系统\n- 完善的**多镜像服**控制操作，获取运行状态/启动/停止/强制终止/同步\n- 基于哈希的文件同步，只同步镜像服与源服务端不同的文件\n- 高可自定义的、配置友好配置文件，多个镜像服配置时只需要书写变化的值\n\n**\\[注意\\]** 本插件不提供服务端创建/管理功能，请在镜像服创建完成并创建对应的MCSManager实例后再使用本插件。同样，本插件不提供镜像服启动/关闭成功的提示信息，建议搭配vchat等插件使用。\n\n## 依赖\n\n**Python**\n\n`xxhash>=3`\n\n**系统**\n\n当使用[terminal](#terminal-通过命令行启动镜像服终端的配置)启动镜像服且系统为`Linux`时：需要`screen`\n\n## 指令\n\n指令前缀默认为`!!mirror`, 控制多个镜像服时将通过指令前缀区分, 详见[配置文件](#mirror)\n\n`!!mirror` 显示指令帮助\n\n`!!mirror help` 显示指令帮助\n\n`!!mirror status` 获取镜像服实例运行状态，状态未知/已停止/正在停止/正在启动/正在运行\n\n`!!mirror start` 启动镜像服实例\n\n`!!mirror stop` 停止镜像服实例\n\n`!!mirror kill` 强制终止镜像服实例\n\n`!!mirror sync` 进行文件同步\n\n`!!mirror confirm` 确认某指令的操作\n\n`!!mirror reload` 热重载对应镜像服的配置文件\n\n## 配置文件\n\n**此配置文件较长**。我们建议你阅读[快速开始](https://github.com/LazyAlienServer/MirrorMcsmcdR/tree/main//docs/quickstart.md)来完成初步的配置。若你需要查找某一具体配置项的解释，你可以阅读下文。\n\n配置文件在`v1.1.0`支持了热重载, 同时添加了更完善的属性补全功能。当新版本的配置文件中新增了某一选项, 插件将会自动将默认值填写到你的旧配置文件中, 而不需要手动添加。\n\n```jsonc\n{\n    \"!!mirror\": {\n        \"mcsm\": {/* MCSManager配置 */},\n        \"terminal\": {/* 通过命令行启动镜像服终端的配置 */},\n        \"rcon\": {/* RCON配置 */},\n        \"sync\": {/* 存档同步配置 */},\n        \"command\": {\n            \"permission\": {/* 指令权限配置 */},\n            \"action\": {/* 指令行为配置 */}\n        },\n        \"display\": {/* 显示配置 */}\n    }\n}\n```\n\n### \"!!mirror\"\n在此参数下配置该镜像服的所有配置，同时，此参数也是控制该镜像服的指令前缀。\n\n要添加新的镜像服，如需要通过`!!mirror2`控制镜像服2，在配置文件中再添加一个`\"!!mirror2\"`即可。\n\n配置文件中的第一个镜像服设置的参数将同时被设置为默认配置，在之后的镜像服的配置文件中，只需要写变化的参数值即可。\n\n**例**\n\n镜像服1为`!!mirror`，同时也是其他镜像服的默认配置文件，那么将`!!mirror`放在配置文件中的第一个\n\n通过`!!mirror2`控制镜像服2，并设置`!!mirror2`的实例id为`abc123`，将`!!mirror2`的服务端名称改为`Mirror2`\n```jsonc\n{\n    \"!!mirror\": {\n        // ...\n    },\n    \"!!mirror2\": {\n        \"mcsm\": {\n            \"uuid\": \"abc123\"\n        },\n        \"display\": {\n            \"server_name\": \"Mirror2\"\n        }\n    }\n}\n```\n其中，在`!!mirror2`中未设置的参数将会自动地从第一个设置的`!!mirror`中继承，例如`!!mirror2`中并未设置`mcsm`的`url`，那么它将继承自`!!mirror`中的`mcsm`的`url`，即`\"http://127.0.0.1:23333/\"`\n\n完整的示例详见[多镜像服配置文件示例](#多镜像服配置文件示例)\n\n<br>\n\n### mcsm: MCSManager配置\n此配置部分若有疑问，请参见[MCSManager官方文档](https://docs.mcsmanager.com/#/zh-cn/apis/readme)\n```jsonc\n\"mcsm\": {\n    \"enable\": false,\n    \"url\": \"http://127.0.0.1:23333/\",\n    \"uuid\": null,\n    \"remote_uuid\": null,\n    \"apikey\": null\n}\n```\n启用MCSM后，终端与RCON都会弃用。\n\n**enable** `bool`\n- 是否启用MCSM，你需要在配置完成此部分后将此选项设置为`true`。\n\n**url** `str`\n- MCSManager面板的访问地址，即请求api的地址。\n\n**uuid** `str`\n- 服务端实例的id，即实例显示的UID。\n\n**remote_uuid** `str`\n- 远程节点的id，即实例显示的GID。\n\n**apikey** `str`\n- 调用API接口必需的密钥，通常在用户界面可以查看。\n\n<br>\n\n### terminal: 通过命令行启动镜像服终端的配置\n```jsonc\n\"terminal\": {\n    \"enable\": false,\n    \"launch_path\": \"./Mirror\",\n    \"launch_command\": \"python -m mcdreforged\",\n    \"port\": null,\n    \"terminal_name\": \"Mirror\",\n    \"regex_strict\": false,\n    \"system\": null\n}\n```\n在Windows系统下，插件将创建一个新的命令行终端来运行镜像服；在Linux系统下，插件将创建一个新的screen来运行镜像服。镜像服停止后，终端/screen都会自动关闭。\n\n如果你无法通过此命令启动镜像服，尝试按以下步骤检查。其中`terminal_name` `launch_command`都为配置文件中对应key的值\n1. 在`launch_path`下执行`launch_command`，并确认能够使镜像服正常启动\n2. Linux用户检查是否安装了`screen`，Windows用户检查终端中输入`python`是否能正常启动Python\n3. 若以上两项都不能解决，则在当前服务端的MCDR根目录下执行对应系统的完整命令，并检查命令回显\n   - Linux `cd \"{launch_path}\"&&screen -dmS {terminal_name}&&screen -x -S {terminal_name} -p 0 -X stuff \"{launch_command}&&exit\\n\"`\n   - Windos `cd \"{launch_path}\"&&start cmd.exe cmd /C python -c \"import os;os.system('title {terminal_name}');os.system('{launch_command}')\"`\n\n注意：在Linux系统下，插件可以通过screen关闭镜像服。在Windows系统下，你必须设置MCSM或RCON才能通过插件关闭镜像服。\n\n**enable** `bool`\n- 是否启用终端，当MCSM未启用且此选项为`true`时将通过终端启动镜像服。\n\n**launch_path** `str`\n- 执行启动命令的路径，通常为镜像服所在的目录。\n\n**launch_command** `str`\n- 需要执行的启动命令，若简单的启动命令无法满足需求，你可以创建一个`.bat`（或`.sh`）文件，并将启动命令写在该文件中，然后执行该文件。\n\n**port** `int`\n- 镜像服运行的端口，插件将通过检查端口状态的方法检查镜像服的运行状态。\n\n**terminal_name** `str`\n- 新终端的标题或新screen的名称，便于镜像服运维。\n\n**regex_strict** `bool`\n- 在通过端口检查镜像服运行状态时，是否在找到端口后继续验证进程名必须为`java.exe`。一般情况下无需开启。若不同的进程在不同时间可能同时占用了设置的端口，例如在某一时间段Minecraft运行在端口`port`上，另一时间段有其他程序运行在端口`port`上而Minecraft没有运行，那么此选项可以一定程度上避免将其他进程误判为java进程。\n\n**system** `str`\n- 系统类型，若为`null`则将自动获取系统类型。可选：`Linux` `Windows`（需首字母大写）\n\n<br>\n\n### rcon: RCON配置\n```jsonc\n\"rcon\": {\n    \"enable\": false,\n    \"address\": null,\n    \"port\": null,\n    \"password\": null\n}\n```\n**enable** `bool`\n- 是否启用RCON，当MCSM未启用时，插件将通过RCON执行`stop`指令和获取镜像服状态。若同时启用了RCON和终端，插件将优先通过检查RCON状态来获取镜像服状态，若RCON未连接，则将通过检查端口来获取状态。若RCON状态与端口状态不匹配将会提示。\n\n**address** `str`\n- RCON的连接地址，不包含端口。\n\n**port** `int`\n- RCON的连接端口\n\n**password** `str`\n- RCON的连接密码\n\n<br>\n\n### sync: 文件同步相关的配置文件\n```jsonc\n\"sync\": {\n    \"world\": [\n\t\"world\"\n    ],\n    \"source\": \"./server\",\n    \"target\": [\n        \"./Mirror/server\"\n    ],\n    \"ignore_inexistent_target_path\": false,\n    \"concurrency\": 4,\n    \"ignore_files\": [\n        \"session.lock\"\n    ]\n}\n```\n\n在`sync`中，`./`即指服务端所在的`MCDReforged`根目录。\n\n```\nmcdr_root (./)\n ├─ config\n ├─ logs\n ├─ plugins\n ├─ server (./server)\n |   └─ world\n └─ Mirror\n     └─ server (./Mirror/server)\n         └─ world\n```\n\n**world** `list`\n- 需要同步的目录，当存档有多个世界文件时需要添加\n\n**source** `str`\n- 源服务端目录，通常应为MCDR的[工作目录](https://mcdreforged.readthedocs.io/zh-cn/latest/configuration.html#working-directory)，即默认情况下的`server`目录。文件由`source/world` 同步至==> `target/world`\n\n**target** `str, list`\n- 目标服务端目录, 只有一个目录时可只写字符串, 多个目录需为列表。将会为每个目标目录都同步一份源目录的文件。默认情况下镜像服的MCDR工作目录位于当前MCDR的根目录下的`Mirror`目录。\n\n**ignore_inexistent_target_path** `bool`\n- 若某个目标服务端目录不存在，当设置为`false`时，将会跳过对该目录的同步。当设置为`true`时，将会新建该目录并继续同步\n\n**concurrency** `int`\n- 同步时进行哈希计算的线程数\n\n**ignore_files** `list`\n- 不进行同步的文件，若使用`carpet`模组和`plus-carpet-addition(PCA)`模组，建议添加`\"carpet.conf\"` `\"pca.conf\"`\n\n<br>\n\n### command: 指令配置\n\n```jsonc\n\"command\": {\n    \"permission\": {/* 指令权限配置 */},\n    \"action\": {/* 指令行为配置 */}\n}\n```\n\n<br>\n\n### permission: 指令权限配置\n```jsonc\n\"permission\": {\n    \"status\": 0,\n    \"start\": 0,\n    \"stop\": 2,\n    \"kill\": 3,\n    \"sync\": 2,\n    \"confirm\": 0,\n    \"abort\": 0\n}\n```\n`int`\n- 执行各指令所需的最低MCDR权限等级\n\n<br>\n\n### action: 指令行为配置\n```jsonc\n\"action\": {\n    \"status\": {\n        \"require_confirm\": false\n    },\n    \"start\": {\n        \"require_confirm\": false\n    },\n    \"stop\": {\n        \"require_confirm\": true\n    },\n    \"kill\": {\n        \"require_confirm\": true\n    },\n    \"sync\": {\n        \"ensure_server_closed\": true,\n        \"auto_server_restart\": false,\n        \"check_status_interval\": 5,\n        \"max_attempt_times\": 3,\n        \"save_world\": {/* 保存世界配置 */},\n        \"require_confirm\": true\n    },\n    \"confirm\": {\n        \"timeout\": 30,\n        \"cancel_anymsg\": true\n    },\n    \"abort\": {\n        \"operator\": \"everyone\"\n    }\n}\n```\n\n\n### 通用配置\n\n**require_confirm** `bool`\n- 当此选项为`true`时, 执行该指令后需要输入`!!mirror confirm`以确认操作\n\n### sync配置\n**ensure_server_closed** `bool`\n- 当此选项为`true`时, 同步时将会检查镜像服是否已停止。当此选项为`false`时, 无论镜像服是否停止, 都将直接进行同步。\n\n**auto_server_restart** `bool`\n- 此选项仅在`ensure_server_closed`为`true`时生效。当此选项为`true`时, 如果同步时镜像服未停止, 那么将在尝试自动停止镜像服后进行同步, 并在同步完成后自动重启镜像服\n\n**check_status_interval** `int`\n- 此选项仅在`auto_server_restart`生效时生效。同步时停止镜像服后, 插件需确认镜像服是否已停止。此选项为检查镜像服状态的时间间隔\n\n**max_attempt_times** `int`\n- 此选项仅在`auto_server_restart`生效时生效。检查镜像服状态的尝试次数, 超过此尝试次数后将不再尝试检查镜像服状态, 并输出`自动关闭失败`及镜像服当前状态信息。等效于超时时间 `timeout = check_status_interval * max_attempt_times`\n\n**save_world** 保存世界配置 *一般无需更改*\n```jsonc\n\"save_world\": {\n    \"turn_off_auto_save\": true,\n    \"commands\": {\n        \"save_all_worlds\": \"save-all flush\",\n        \"auto_save_off\": \"save-off\",\n        \"auto_save_on\": \"save-on\"\n    },\n    \"saved_world_regex\": \"^Saved the game$\",\n    \"save_world_max_wait_sec\": 60\n}\n```\n**turn_off_auto_save** `bool`\n- 保存世界时关闭自动保存\n\n**commands** 相关指令\n- **save_all_worlds** `str`\n  + 保存世界的指令\n- **auto_save_off** `str`\n  + 关闭自动保存的指令\n- **auto_save_on** `str`\n  + 开启自动保存的指令\n\n**saved_world_regex** `str`\n- 匹配服务端\"世界保存完成\"日志的正则表达式\n\n**save_world_max_wait_sec** `int`\n- 保存世界的最大等待时间(秒)，超时将会跳过世界保存并进行同步\n\n### confirm配置\n玩家只能确认自己执行的指令\n\n**timeout** `int`\n- 需确认的指令经过多少秒后超时取消。若执行某指令后超过`timeout`秒后, 该玩家未进行任何操作, 则此指令超时，自动取消\n\n**cancel_anymsg** `bool`\n- 若玩家执行某指令后发送了除`confirm`指令外的消息, 则此指令操作自动取消。除此之外, 若玩家执行了某指令后又执行了对应镜像服的其他指令, 则先前执行的指令自动取消\n\n### abort配置\n~此功能仍在开发~\n\n<br>\n\n### display: 显示配置\n```jsonc\n\"display\": {\n    \"server_name\": \"Mirror\"\n}\n```\n**server_name** `str`\n- \"镜像服\"的名称，用以在显示时区分不同的镜像服\n\n<br>\n\n### 多镜像服配置文件示例\n\n```jsonc\n{\n    \"!!mirror\": {\n        \"mcsm\": {\n            \"enable\": true,\n            \"url\": \"http://127.0.0.1:23333/\",\n            \"uuid\": \"71154??????????0a1a2f4dd90695609\",\n            \"remote_uuid\": \"6e927??????????999f0e66bc404071b\",\n            \"apikey\": \"b8f???????????????????????????ade\"\n        },\n        \"terminal\": {\n            \"enable\": false,\n            \"launch_path\": \"./Mirror\",\n            \"launch_command\": \"python -m mcdreforged\",\n            \"port\": null,\n            \"terminal_name\": \"Mirror\",\n            \"regex_strict\": false,\n            \"system\": null\n        },\n        \"rcon\": {\n            \"enable\": false,\n            \"address\": null,\n            \"port\": null,\n            \"password\": null\n        },\n        \"sync\": {\n            \"world\": [\n                \"world\"\n            ],\n            \"source\": \"./server\",\n            \"target\": [\n                \"./Mirror/server\"\n            ],\n            \"ignore_inexistent_target_path\": false,\n            \"concurrency\": 4,\n            \"ignore_files\": [\n                \"session.lock\"\n            ]\n        },\n        \"command\": {\n            \"permission\": {\n                \"status\": 0,\n                \"start\": 0,\n                \"stop\": 2,\n                \"kill\": 3,\n                \"sync\": 2,\n                \"confirm\": 0,\n                \"abort\": 0\n            },\n            \"action\": {\n                \"status\": {\n                    \"require_confirm\": false\n                },\n                \"start\": {\n                    \"require_confirm\": false\n                },\n                \"stop\": {\n                    \"require_confirm\": true\n                },\n                \"kill\": {\n                    \"require_confirm\": true\n                },\n                \"sync\": {\n                    \"ensure_server_closed\": true,\n                    \"auto_server_restart\": true,\n                    \"check_status_interval\": 5,\n                    \"max_attempt_times\": 3,\n                    \"save_world\": {\n                        \"turn_off_auto_save\": true,\n                        \"commands\": {\n                            \"save_all_worlds\": \"save-all flush\",\n                            \"auto_save_off\": \"save-off\",\n                            \"auto_save_on\": \"save-on\"\n                        },\n                        \"saved_world_regex\": \"^Saved the game$\",\n                        \"save_world_max_wait_sec\": 60\n                    },\n                    \"require_confirm\": true\n                },\n                \"confirm\": {\n                    \"timeout\": 30,\n                    \"cancel_anymsg\": true\n                },\n                \"abort\": {\n                    \"operator\": \"everyone\"\n                }\n            }\n        },\n        \"display\": {\n            \"server_name\": \"Mirror\"\n        }\n    },\n    \"!!mirror2\": {\n        \"mcsm\": {\n            \"uuid\": \"83011??????????49c1133fc08a41b80\"\n        },\n        \"sync\": {\n            \"target\": [\n                \"./Mirror2/server\"\n            ]\n        },\n        \"display\": {\n            \"server_name\": \"Mirror2\"\n        }\n    },\n    \"!!mirror3\": {\n        \"mcsm\": {\n            \"enable\": false\n        },\n        \"sync\": {\n            \"target\": [\n                \"./Mirror3/server\"\n            ]\n        },\n        \"terminal\": {\n            \"enable\": true,\n            \"launch_path\": \"./Mirror3\",\n            \"port\": 30002,\n            \"terminal_name\": \"Mirror3\"\n        },\n        \"rcon\": {\n            \"enable\": true,\n            \"address\": \"127.0.0.1\",\n            \"port\": 31002,\n            \"password\": \"p@ssw0rd\"\n        }\n    }\n}\n```\n\n## 致谢\n\n- 哈希比对思路 / [better_backup](https://github.com/z0z0r4/better_backup)\n- 配置文件权限配置思路 / [PrimeBackup](https://github.com/TISUnion/PrimeBackup)\n- 保存世界思路 / [QuickBackupM](https://github.com/TISUnion/QuickBackupM)\n\n## ToDo\n\n- [x] 指令执行确认\n- [ ] 指令执行延迟\n- [ ] 禁止同步`!!mirror sync enable/disable reason`\n- [x] lang语言文件\n- [ ] 指令禁用\n- [x] RCON支持\n- [x] 无MCSM下通过命令行启动服务端\n- [ ] Linux/Windows通过终端执行`kill`指令\n- [ ] 历史同步记录显示\n"
    },
    "introduction_urls": {
      "zh_cn": "https://raw.githubusercontent.com/LazyAlienServer/MirrorMcsmcdR/main/README.md",
      "en_us": "https://raw.githubusercontent.com/LazyAlienServer/MirrorMcsmcdR/main/README_en.md"
    }
  },
  "release": {
    "schema_version": 8,
    "id": "mirror_mcsmcdr",
    "latest_version": "1.4.1",
    "latest_version_index": 0,
    "releases": [
      {
        "url": "https://github.com/LazyAlienServer/MirrorMcsmcdR/releases/tag/v1.4.1",
        "name": "v1.4.1",
        "tag_name": "v1.4.1",
        "created_at": "2025-08-23T08:51:06Z",
        "description": "# News\r\n- 优化对Linux screen的检测与支持\r\n- 部分错误信息调整为仅输出到终端，防止敏感信息泄露\r\n\r\n# Fixes\r\n- 修复`en_us`语言中的部分错误",
        "prerelease": false,
        "asset": {
          "id": 285419062,
          "name": "MirrorMcsmcdR-v1.4.1.mcdr",
          "size": 32029,
          "download_count": 82,
          "created_at": "2025-08-23T08:52:40Z",
          "browser_download_url": "https://github.com/LazyAlienServer/MirrorMcsmcdR/releases/download/v1.4.1/MirrorMcsmcdR-v1.4.1.mcdr",
          "hash_md5": "f57facada1437876117fd4e5c203fe77",
          "hash_sha256": "2eda7ba122525df109b422e3cd0a1322494e3b16751031b21f67e9e1c0f8839d"
        },
        "meta": {
          "schema_version": 4,
          "id": "mirror_mcsmcdr",
          "name": "MirrorMcsmcdR",
          "version": "1.4.1",
          "link": "https://github.com/LazyAlienServer/MirrorMcsmcdR",
          "authors": [
            "tanh_Heng"
          ],
          "dependencies": {
            "mcdreforged": ">=2.6.0"
          },
          "requirements": [
            "xxhash>=3"
          ],
          "description": {
            "en_us": "A mirror server manager MCDR plugin, based on MCSManager.",
            "zh_cn": "一个多功能的完善的控制镜像服的MCDR插件"
          }
        }
      },
      {
        "url": "https://github.com/LazyAlienServer/MirrorMcsmcdR/releases/tag/v1.4.0",
        "name": "v1.4.0",
        "tag_name": "v1.4.0",
        "created_at": "2025-05-23T16:06:22Z",
        "description": "# News\r\n- 区块操作工具完成，预计在v1.5.0加入区块同步功能\r\n- 自动检查`mcsm` `rcon` `terminal`的配置项，并在加载时提示哪些键值存在问题\r\n- 现在上述三个接口可以被分别独立加载了，即其中一个接口配置存在问题不会阻碍其余两个接口的加载与使用\r\n- 使用`!!mirror`指令时自动显示接口配置与启用状态\r\n- 优化部分回显\r\n\r\n# Fixes\r\n- 修复在除`!!mirror status`指令中获取status时，部分翻译键名调用错误的问题\r\n- 修复Windows系统下启用`terminal`的严格检查`regex_strict`失效的问题",
        "prerelease": false,
        "asset": {
          "id": 257508894,
          "name": "MirrorMcsmcdR-v1.4.0.mcdr",
          "size": 28304,
          "download_count": 115,
          "created_at": "2025-05-23T17:10:05Z",
          "browser_download_url": "https://github.com/LazyAlienServer/MirrorMcsmcdR/releases/download/v1.4.0/MirrorMcsmcdR-v1.4.0.mcdr",
          "hash_md5": "f5120aaf05822168fb46bdbc7e098512",
          "hash_sha256": "56ab807c38eda5f8aae15c5c069d1e59ebc1df46c1b9e6b3507d8fb695e29c38"
        },
        "meta": {
          "schema_version": 4,
          "id": "mirror_mcsmcdr",
          "name": "MirrorMcsmcdR",
          "version": "1.4.0",
          "link": "https://github.com/LazyAlienServer/MirrorMcsmcdR",
          "authors": [
            "tanh_Heng"
          ],
          "dependencies": {
            "mcdreforged": ">=2.6.0"
          },
          "requirements": [
            "xxhash>=3"
          ],
          "description": {
            "en_us": "A mirror server manager MCDR plugin, based on MCSManager.",
            "zh_cn": "一个多功能的完善的控制镜像服的MCDR插件"
          }
        }
      },
      {
        "url": "https://github.com/LazyAlienServer/MirrorMcsmcdR/releases/tag/v1.3.6",
        "name": "v1.3.6",
        "tag_name": "v1.3.6",
        "created_at": "2024-08-30T11:44:07Z",
        "description": "# Fixes\r\n- 修复实际检查权限与README描述不一致的问题，现在使用`has_permission`函数检查指令权限（ #15 ）",
        "prerelease": false,
        "asset": {
          "id": 189347787,
          "name": "MirrorMcsmcdR-v1.3.6.mcdr",
          "size": 25944,
          "download_count": 164,
          "created_at": "2024-08-30T11:48:35Z",
          "browser_download_url": "https://github.com/LazyAlienServer/MirrorMcsmcdR/releases/download/v1.3.6/MirrorMcsmcdR-v1.3.6.mcdr",
          "hash_md5": "b36ef9417c25d8e35411b67237f7007a",
          "hash_sha256": "4e7909a1ec8780642e687bd04b51ec59d59e2090b1decc6afddd509fbc15b093"
        },
        "meta": {
          "schema_version": 4,
          "id": "mirror_mcsmcdr",
          "name": "MirrorMcsmcdR",
          "version": "1.3.6",
          "link": "https://github.com/LazyAlienServer/MirrorMcsmcdR",
          "authors": [
            "tanh_Heng"
          ],
          "dependencies": {
            "mcdreforged": ">=2.6.0"
          },
          "requirements": [
            "xxhash>=3"
          ],
          "description": {
            "en_us": "A mirror server manager MCDR plugin, based on MCSManager.",
            "zh_cn": "一个多功能的完善的控制镜像服的MCDR插件"
          }
        }
      },
      {
        "url": "https://github.com/LazyAlienServer/MirrorMcsmcdR/releases/tag/v1.3.5",
        "name": "v1.3.5",
        "tag_name": "v1.3.5",
        "created_at": "2024-08-01T11:10:14Z",
        "description": "# Fixes\r\n- 修复了sync时无法获取status时，提示信息对应的语言文件错误的问题",
        "prerelease": false,
        "asset": {
          "id": 183196498,
          "name": "MirrorMcsmcdR-v1.3.5.mcdr",
          "size": 25953,
          "download_count": 72,
          "created_at": "2024-08-01T11:11:24Z",
          "browser_download_url": "https://github.com/LazyAlienServer/MirrorMcsmcdR/releases/download/v1.3.5/MirrorMcsmcdR-v1.3.5.mcdr",
          "hash_md5": "fc6f42d67781120d7b2d334a20bf7a1a",
          "hash_sha256": "949cc4da54e08405dca9f79aa6b0bd76c8a0b3ddc05dcb0385ac4aee62d990b6"
        },
        "meta": {
          "schema_version": 4,
          "id": "mirror_mcsmcdr",
          "name": "MirrorMcsmcdR",
          "version": "1.3.5",
          "link": "https://github.com/LazyAlienServer/MirrorMcsmcdR",
          "authors": [
            "tanh_Heng"
          ],
          "dependencies": {
            "mcdreforged": ">=2.6.0"
          },
          "requirements": [
            "xxhash>=3"
          ],
          "description": {
            "en_us": "A mirror server manager MCDR plugin, based on MCSManager.",
            "zh_cn": "一个多功能的完善的控制镜像服的MCDR插件"
          }
        }
      },
      {
        "url": "https://github.com/LazyAlienServer/MirrorMcsmcdR/releases/tag/v1.3.4",
        "name": "v1.3.4",
        "tag_name": "v1.3.4",
        "created_at": "2024-07-25T05:44:32Z",
        "description": "# Fixes\r\n- 优化部分回显`reply`->`broadcast`\r\n  + 权限不足或执行失败时使用`reply`，即其他玩家看不到回显；执行成功时使用`broadcast`，即其他玩家和控制台可以看到回显",
        "prerelease": false,
        "asset": {
          "id": 181714606,
          "name": "MirrorMcsmcdR-v1.3.4.mcdr",
          "size": 25893,
          "download_count": 47,
          "created_at": "2024-07-25T05:47:10Z",
          "browser_download_url": "https://github.com/LazyAlienServer/MirrorMcsmcdR/releases/download/v1.3.4/MirrorMcsmcdR-v1.3.4.mcdr",
          "hash_md5": "2f90f7f17cbcc0fd8163d003facfefbb",
          "hash_sha256": "ab7c6647448fd5fa7063a4b23345d3d5837720ba6c62cad594690b944ae454c8"
        },
        "meta": {
          "schema_version": 4,
          "id": "mirror_mcsmcdr",
          "name": "MirrorMcsmcdR",
          "version": "1.3.4",
          "link": "https://github.com/LazyAlienServer/MirrorMcsmcdR",
          "authors": [
            "tanh_Heng"
          ],
          "dependencies": {
            "mcdreforged": ">=2.6.0"
          },
          "requirements": [
            "xxhash>=3"
          ],
          "description": {
            "en_us": "A mirror server manager MCDR plugin, based on MCSManager.",
            "zh_cn": "一个多功能的完善的控制镜像服的MCDR插件"
          }
        }
      },
      {
        "url": "https://github.com/LazyAlienServer/MirrorMcsmcdR/releases/tag/v1.3.3",
        "name": "v1.3.3",
        "tag_name": "v1.3.3",
        "created_at": "2024-07-24T09:14:49Z",
        "description": "# Fixes\r\n- 修复了Windows下使用terminal获取status时，启用严格匹配后报错的问题 #10 \r\n- 修复了`status`命令报错没有捕获并回显的问题",
        "prerelease": false,
        "asset": {
          "id": 181519077,
          "name": "MirrorMcsmcdR-v1.3.3.mcdr",
          "size": 25898,
          "download_count": 37,
          "created_at": "2024-07-24T09:16:40Z",
          "browser_download_url": "https://github.com/LazyAlienServer/MirrorMcsmcdR/releases/download/v1.3.3/MirrorMcsmcdR-v1.3.3.mcdr",
          "hash_md5": "057a40f623ed75e6499554f1224fd0fd",
          "hash_sha256": "259542ffa128a6d19fff7cb2a049db744acd600321fd3201d6e3dd16e41a8205"
        },
        "meta": {
          "schema_version": 4,
          "id": "mirror_mcsmcdr",
          "name": "MirrorMcsmcdR",
          "version": "1.3.3",
          "link": "https://github.com/LazyAlienServer/MirrorMcsmcdR",
          "authors": [
            "tanh_Heng"
          ],
          "dependencies": {
            "mcdreforged": ">=2.6.0"
          },
          "requirements": [
            "xxhash>=3"
          ],
          "description": {
            "en_us": "A mirror server manager MCDR plugin, based on MCSManager.",
            "zh_cn": "一个多功能的完善的控制镜像服的MCDR插件"
          }
        }
      },
      {
        "url": "https://github.com/LazyAlienServer/MirrorMcsmcdR/releases/tag/v1.3.2",
        "name": "v1.3.2",
        "tag_name": "v1.3.2",
        "created_at": "2024-07-21T11:41:55Z",
        "description": "# Fixes\r\n- 修复了文件同步时，目标文件夹不存在会报错的问题\r\n- 修复了文件同步时，目标文件不存在会跳过同步的问题\r\n- 修复了配置`rcon`但未配置`terminal`时无法使用`status`命令的问题\r\n- 简化部分代码",
        "prerelease": false,
        "asset": {
          "id": 180904820,
          "name": "MirrorMcsmcdR-v1.3.2.mcdr",
          "size": 25898,
          "download_count": 40,
          "created_at": "2024-07-21T11:42:39Z",
          "browser_download_url": "https://github.com/LazyAlienServer/MirrorMcsmcdR/releases/download/v1.3.2/MirrorMcsmcdR-v1.3.2.mcdr",
          "hash_md5": "be0b10b36e75eca713c6692b230c5770",
          "hash_sha256": "79d19dff4b967959472cf74c2af09c0df6eeb7a2f0fff774a2e3f59a88f672ba"
        },
        "meta": {
          "schema_version": 4,
          "id": "mirror_mcsmcdr",
          "name": "MirrorMcsmcdR",
          "version": "1.3.2",
          "link": "https://github.com/LazyAlienServer/MirrorMcsmcdR",
          "authors": [
            "tanh_Heng"
          ],
          "dependencies": {
            "mcdreforged": ">=2.6.0"
          },
          "requirements": [
            "xxhash>=3"
          ],
          "description": {
            "en_us": "A mirror server manager MCDR plugin, based on MCSManager.",
            "zh_cn": "一个多功能的完善的控制镜像服的MCDR插件"
          }
        }
      },
      {
        "url": "https://github.com/LazyAlienServer/MirrorMcsmcdR/releases/tag/v1.3.1",
        "name": "v1.3.1",
        "tag_name": "v1.3.1",
        "created_at": "2024-07-02T09:02:36Z",
        "description": "# News\r\n- 通过`terminal`启动镜像服时，若找不到服务端目录将会提示\r\n- 优化`terminal`启动命令\r\n\r\n# Fixes\r\n- 实测`MCSManager-v10.2.1`的API现已可用\r\n- 修复了Linux无法使用`terminal`执行`stop`命令的问题\r\n- 修复了`zh_cn`语言文件中部分存在歧义的表述",
        "prerelease": false,
        "asset": {
          "id": 177173812,
          "name": "MirrorMcsmcdR-v1.3.1.mcdr",
          "size": 25856,
          "download_count": 60,
          "created_at": "2024-07-02T09:06:19Z",
          "browser_download_url": "https://github.com/LazyAlienServer/MirrorMcsmcdR/releases/download/v1.3.1/MirrorMcsmcdR-v1.3.1.mcdr",
          "hash_md5": "9b42209e7ab602de87643c20aa875183",
          "hash_sha256": "82ae4a6fca58d1c53ea5d596e8f8944e66c75f0be2de9fbee6376da1863a7c19"
        },
        "meta": {
          "schema_version": 4,
          "id": "mirror_mcsmcdr",
          "name": "MirrorMcsmcdR",
          "version": "1.3.1",
          "link": "https://github.com/LazyAlienServer/MirrorMcsmcdR",
          "authors": [
            "tanh_Heng"
          ],
          "dependencies": {
            "mcdreforged": ">=2.6.0"
          },
          "requirements": [
            "xxhash>=3"
          ],
          "description": {
            "en_us": "A mirror server manager MCDR plugin, based on MCSManager.",
            "zh_cn": "一个基于MCSM的镜像服控制的MCDR插件"
          }
        }
      },
      {
        "url": "https://github.com/LazyAlienServer/MirrorMcsmcdR/releases/tag/v1.2.1",
        "name": "v1.2.1",
        "tag_name": "v1.2.1",
        "created_at": "2024-04-28T06:36:32Z",
        "description": "**BUG FIX**\r\n- 修复了镜像服运行时进行同步和自动重启，需要确认停止指令且停止后不进行同步的问题。现在自动重启的停服指令不需要确认了\r\n- 修复了`!!mirror status`失效的问题",
        "prerelease": false,
        "asset": {
          "id": 164705757,
          "name": "MirrorMcsmcdR-v1.2.1.mcdr",
          "size": 21601,
          "download_count": 83,
          "created_at": "2024-04-28T06:38:18Z",
          "browser_download_url": "https://github.com/LazyAlienServer/MirrorMcsmcdR/releases/download/v1.2.1/MirrorMcsmcdR-v1.2.1.mcdr",
          "hash_md5": "3929d7a30f557cf89a4fd565f3c6c931",
          "hash_sha256": "c84274ea84cf241a845777eb4104a1a94a4f8368a3ef84835005235046a48a7b"
        },
        "meta": {
          "schema_version": 4,
          "id": "mirror_mcsmcdr",
          "name": "MirrorMcsmcdR",
          "version": "1.2.1",
          "link": "https://github.com/LazyAlienServer/MirrorMcsmcdR",
          "authors": [
            "tanh_Heng"
          ],
          "dependencies": {
            "mcdreforged": ">=2.1.2"
          },
          "requirements": [
            "xxhash>=3"
          ],
          "description": {
            "en_us": "A mirror server manager MCDR plugin, based on MCSManager.",
            "zh_cn": "一个基于MCSM的镜像服控制的MCDR插件"
          }
        }
      },
      {
        "url": "https://github.com/LazyAlienServer/MirrorMcsmcdR/releases/tag/v1.2.0",
        "name": "v1.2.0",
        "tag_name": "v1.2.0",
        "created_at": "2024-04-27T14:54:02Z",
        "description": "**\\[注意\\]** 从旧版本更新时务必将配置文件中`mcsm`下的`enable`设置为`true`\r\n\r\n- 新增了功能完善的`confirm`操作确认功能\r\n- 计划配置`lang`语言文件\r\n- 计划支持`cmd`启动服务端\r\n- 优化了文件目录结构\r\n- 常规优化",
        "prerelease": false,
        "asset": {
          "id": 164700405,
          "name": "MirrorMcsmcdR-v1.2.0.mcdr",
          "size": 21610,
          "download_count": 37,
          "created_at": "2024-04-28T05:46:54Z",
          "browser_download_url": "https://github.com/LazyAlienServer/MirrorMcsmcdR/releases/download/v1.2.0/MirrorMcsmcdR-v1.2.0.mcdr",
          "hash_md5": "1518bdba5fe5c7975aa0db4e292cab2f",
          "hash_sha256": "abcaaca3019ee640ffe1986cffcd63682ad7ee881d9c82a7f5f6e0ab8a115b2c"
        },
        "meta": {
          "schema_version": 4,
          "id": "mirror_mcsmcdr",
          "name": "MirrorMcsmcdR",
          "version": "1.2.0",
          "link": "https://github.com/LazyAlienServer/MirrorMcsmcdR",
          "authors": [
            "tanh_Heng"
          ],
          "dependencies": {
            "mcdreforged": ">=2.1.2"
          },
          "requirements": [
            "xxhash>=3"
          ],
          "description": {
            "en_us": "A mirror server manager MCDR plugin, based on MCSManager.",
            "zh_cn": "一个基于MCSM的镜像服控制的MCDR插件"
          }
        }
      },
      {
        "url": "https://github.com/LazyAlienServer/MirrorMcsmcdR/releases/tag/v1.1.0",
        "name": "v1.1.0",
        "tag_name": "v1.1.0",
        "created_at": "2024-04-07T12:07:57Z",
        "description": "- 更完善的配置文件自动检查补全功能\r\n- 可针对所选镜像服的配置文件进行热重载\r\n- 镜像服同步自动重启\r\n- 显示优化\r\n- 部分代码优化",
        "prerelease": false,
        "asset": {
          "id": 160771305,
          "name": "MirrorMcsmcdR-v1.1.0.mcdr",
          "size": 19421,
          "download_count": 35,
          "created_at": "2024-04-07T12:08:27Z",
          "browser_download_url": "https://github.com/LazyAlienServer/MirrorMcsmcdR/releases/download/v1.1.0/MirrorMcsmcdR-v1.1.0.mcdr",
          "hash_md5": "f3e1267338f1eb76c3b49615653788ae",
          "hash_sha256": "8e2677b21084cb4309acb975e91fc1bfaf3041231720b5bdf0ec2f3b1a50d813"
        },
        "meta": {
          "schema_version": 4,
          "id": "mirror_mcsmcdr",
          "name": "MirrorMcsmcdR",
          "version": "1.1.0",
          "link": "https://github.com/LazyAlienServer/MirrorMcsmcdR",
          "authors": [
            "tanh_Heng"
          ],
          "dependencies": {
            "mcdreforged": ">=2.1.2"
          },
          "requirements": [
            "xxhash>=3"
          ],
          "description": {
            "en_us": "A mirror server manager MCDR plugin, based on MCSManager.",
            "zh_cn": "一个基于MCSM的镜像服控制的MCDR插件"
          }
        }
      },
      {
        "url": "https://github.com/LazyAlienServer/MirrorMcsmcdR/releases/tag/v1.0.1",
        "name": "v1.0.1",
        "tag_name": "v1.0.1",
        "created_at": "2024-04-06T09:05:05Z",
        "description": "- 如果要从v0.1升级至v1.0，请按README中新的配置文件示例修改你的配置文件\r\n- 支持了多镜像服控制\r\n- 目标服务端目录`target`支持了列表，现在可以同时向多个目标目录进行同步了\r\n- 添加了`ignore_inexistent_target_path`\r\n- 修改了MCDR指令注册方式\r\n- 优化显示",
        "prerelease": false,
        "asset": {
          "id": 160622686,
          "name": "MirrorMcsmcdR-v1.0.1.mcdr",
          "size": 18622,
          "download_count": 41,
          "created_at": "2024-04-06T09:05:50Z",
          "browser_download_url": "https://github.com/LazyAlienServer/MirrorMcsmcdR/releases/download/v1.0.1/MirrorMcsmcdR-v1.0.1.mcdr",
          "hash_md5": "a7461adaa804bca30a9486acdc5b0ad5",
          "hash_sha256": "b8f337c1f0a1bd38bde99432af22d4a4fd76913f9ae4305b475362833e13f04d"
        },
        "meta": {
          "schema_version": 4,
          "id": "mirror_mcsmcdr",
          "name": "MirrorMcsmcdR",
          "version": "1.0.1",
          "link": "https://github.com/LazyAlienServer/MirrorMcsmcdR",
          "authors": [
            "tanh_Heng"
          ],
          "dependencies": {
            "mcdreforged": ">=2.1.2"
          },
          "requirements": [
            "xxhash>=3"
          ],
          "description": {
            "en_us": "A mirror server manager MCDR plugin, based on MCSManager.",
            "zh_cn": "一个基于MCSM的镜像服控制的MCDR插件"
          }
        }
      },
      {
        "url": "https://github.com/LazyAlienServer/MirrorMcsmcdR/releases/tag/v0.1.0",
        "name": "v0.1.0",
        "tag_name": "v0.1.0",
        "created_at": "2024-01-06T08:32:06Z",
        "description": "",
        "prerelease": false,
        "asset": {
          "id": 144067743,
          "name": "MirrorMcsmcdR-v0.1.0.mcdr",
          "size": 5637,
          "download_count": 37,
          "created_at": "2024-01-06T08:32:34Z",
          "browser_download_url": "https://github.com/LazyAlienServer/MirrorMcsmcdR/releases/download/v0.1.0/MirrorMcsmcdR-v0.1.0.mcdr",
          "hash_md5": "b0bb3ad0016c75fb0256fca79e9fdbaf",
          "hash_sha256": "e23ea0c103f69b85e4ef7df953f9814160aa9768e047898314c7a8b558e45b79"
        },
        "meta": {
          "schema_version": 4,
          "id": "mirror_mcsmcdr",
          "name": "MirrorMcsmcdR",
          "version": "0.1.0",
          "link": "https://github.com/LazyAlienServer/MirrorMcsmcdR",
          "authors": [
            "tanh_Heng"
          ],
          "dependencies": {
            "mcdreforged": ">=2.1.2"
          },
          "requirements": [],
          "description": {
            "en_us": "A mirror server manager MCDR plugin, based on MCSManager.",
            "zh_cn": "一个基于MCSM的镜像服控制的MCDR插件"
          }
        }
      }
    ]
  },
  "repository": {
    "url": "https://github.com/LazyAlienServer/MirrorMcsmcdR",
    "name": "MirrorMcsmcdR",
    "full_name": "LazyAlienServer/MirrorMcsmcdR",
    "html_url": "https://github.com/LazyAlienServer/MirrorMcsmcdR",
    "description": "一个超级完善的MCDR插件，可通过多种方式对镜像服进行控制与进行文件同步",
    "archived": false,
    "stargazers_count": 14,
    "watchers_count": 14,
    "forks_count": 1,
    "readme": "# MirrorMcsmcdR\n\n中文 | [English](https://github.com/LazyAlienServer/MirrorMcsmcdR/tree/main/./README_en.md)\n\n一个**超级完善的**[MCDR](https://github.com/Fallen-Breath/MCDReforged)插件，可通过多种方式对镜像服进行控制与进行文件同步\n\n## 特性\n\n- 插件支持通过[MCSManager](https://github.com/MCSManager/MCSManager)控制镜像服，也可以不依赖MCSM，直接通过终端或RCON对镜像服进行控制（`v1.3.0+`）\n  + MCSM控制：支持`MCSM-v9.9.0` `MCSM-v10.2.1+`\n  + 终端或RCON控制：支持`Windows` `Linux`系统\n- 完善的**多镜像服**控制操作，获取运行状态/启动/停止/强制终止/同步\n- 基于哈希的文件同步，只同步镜像服与源服务端不同的文件\n- 高可自定义的、配置友好配置文件，多个镜像服配置时只需要书写变化的值\n\n**\\[注意\\]** 本插件不提供服务端创建/管理功能，请在镜像服创建完成并创建对应的MCSManager实例后再使用本插件。同样，本插件不提供镜像服启动/关闭成功的提示信息，建议搭配vchat等插件使用。\n\n## 依赖\n\n**Python**\n\n`xxhash>=3`\n\n**系统**\n\n当使用[terminal](#terminal-通过命令行启动镜像服终端的配置)启动镜像服且系统为`Linux`时：需要`screen`\n\n## 指令\n\n指令前缀默认为`!!mirror`, 控制多个镜像服时将通过指令前缀区分, 详见[配置文件](#mirror)\n\n`!!mirror` 显示指令帮助\n\n`!!mirror help` 显示指令帮助\n\n`!!mirror status` 获取镜像服实例运行状态，状态未知/已停止/正在停止/正在启动/正在运行\n\n`!!mirror start` 启动镜像服实例\n\n`!!mirror stop` 停止镜像服实例\n\n`!!mirror kill` 强制终止镜像服实例\n\n`!!mirror sync` 进行文件同步\n\n`!!mirror confirm` 确认某指令的操作\n\n`!!mirror reload` 热重载对应镜像服的配置文件\n\n## 配置文件\n\n**此配置文件较长**。我们建议你阅读[快速开始](https://github.com/LazyAlienServer/MirrorMcsmcdR/tree/main//docs/quickstart.md)来完成初步的配置。若你需要查找某一具体配置项的解释，你可以阅读下文。\n\n配置文件在`v1.1.0`支持了热重载, 同时添加了更完善的属性补全功能。当新版本的配置文件中新增了某一选项, 插件将会自动将默认值填写到你的旧配置文件中, 而不需要手动添加。\n\n```jsonc\n{\n    \"!!mirror\": {\n        \"mcsm\": {/* MCSManager配置 */},\n        \"terminal\": {/* 通过命令行启动镜像服终端的配置 */},\n        \"rcon\": {/* RCON配置 */},\n        \"sync\": {/* 存档同步配置 */},\n        \"command\": {\n            \"permission\": {/* 指令权限配置 */},\n            \"action\": {/* 指令行为配置 */}\n        },\n        \"display\": {/* 显示配置 */}\n    }\n}\n```\n\n### \"!!mirror\"\n在此参数下配置该镜像服的所有配置，同时，此参数也是控制该镜像服的指令前缀。\n\n要添加新的镜像服，如需要通过`!!mirror2`控制镜像服2，在配置文件中再添加一个`\"!!mirror2\"`即可。\n\n配置文件中的第一个镜像服设置的参数将同时被设置为默认配置，在之后的镜像服的配置文件中，只需要写变化的参数值即可。\n\n**例**\n\n镜像服1为`!!mirror`，同时也是其他镜像服的默认配置文件，那么将`!!mirror`放在配置文件中的第一个\n\n通过`!!mirror2`控制镜像服2，并设置`!!mirror2`的实例id为`abc123`，将`!!mirror2`的服务端名称改为`Mirror2`\n```jsonc\n{\n    \"!!mirror\": {\n        // ...\n    },\n    \"!!mirror2\": {\n        \"mcsm\": {\n            \"uuid\": \"abc123\"\n        },\n        \"display\": {\n            \"server_name\": \"Mirror2\"\n        }\n    }\n}\n```\n其中，在`!!mirror2`中未设置的参数将会自动地从第一个设置的`!!mirror`中继承，例如`!!mirror2`中并未设置`mcsm`的`url`，那么它将继承自`!!mirror`中的`mcsm`的`url`，即`\"http://127.0.0.1:23333/\"`\n\n完整的示例详见[多镜像服配置文件示例](#多镜像服配置文件示例)\n\n<br>\n\n### mcsm: MCSManager配置\n此配置部分若有疑问，请参见[MCSManager官方文档](https://docs.mcsmanager.com/#/zh-cn/apis/readme)\n```jsonc\n\"mcsm\": {\n    \"enable\": false,\n    \"url\": \"http://127.0.0.1:23333/\",\n    \"uuid\": null,\n    \"remote_uuid\": null,\n    \"apikey\": null\n}\n```\n启用MCSM后，终端与RCON都会弃用。\n\n**enable** `bool`\n- 是否启用MCSM，你需要在配置完成此部分后将此选项设置为`true`。\n\n**url** `str`\n- MCSManager面板的访问地址，即请求api的地址。\n\n**uuid** `str`\n- 服务端实例的id，即实例显示的UID。\n\n**remote_uuid** `str`\n- 远程节点的id，即实例显示的GID。\n\n**apikey** `str`\n- 调用API接口必需的密钥，通常在用户界面可以查看。\n\n<br>\n\n### terminal: 通过命令行启动镜像服终端的配置\n```jsonc\n\"terminal\": {\n    \"enable\": false,\n    \"launch_path\": \"./Mirror\",\n    \"launch_command\": \"python -m mcdreforged\",\n    \"port\": null,\n    \"terminal_name\": \"Mirror\",\n    \"regex_strict\": false,\n    \"system\": null\n}\n```\n在Windows系统下，插件将创建一个新的命令行终端来运行镜像服；在Linux系统下，插件将创建一个新的screen来运行镜像服。镜像服停止后，终端/screen都会自动关闭。\n\n如果你无法通过此命令启动镜像服，尝试按以下步骤检查。其中`terminal_name` `launch_command`都为配置文件中对应key的值\n1. 在`launch_path`下执行`launch_command`，并确认能够使镜像服正常启动\n2. Linux用户检查是否安装了`screen`，Windows用户检查终端中输入`python`是否能正常启动Python\n3. 若以上两项都不能解决，则在当前服务端的MCDR根目录下执行对应系统的完整命令，并检查命令回显\n   - Linux `cd \"{launch_path}\"&&screen -dmS {terminal_name}&&screen -x -S {terminal_name} -p 0 -X stuff \"{launch_command}&&exit\\n\"`\n   - Windos `cd \"{launch_path}\"&&start cmd.exe cmd /C python -c \"import os;os.system('title {terminal_name}');os.system('{launch_command}')\"`\n\n注意：在Linux系统下，插件可以通过screen关闭镜像服。在Windows系统下，你必须设置MCSM或RCON才能通过插件关闭镜像服。\n\n**enable** `bool`\n- 是否启用终端，当MCSM未启用且此选项为`true`时将通过终端启动镜像服。\n\n**launch_path** `str`\n- 执行启动命令的路径，通常为镜像服所在的目录。\n\n**launch_command** `str`\n- 需要执行的启动命令，若简单的启动命令无法满足需求，你可以创建一个`.bat`（或`.sh`）文件，并将启动命令写在该文件中，然后执行该文件。\n\n**port** `int`\n- 镜像服运行的端口，插件将通过检查端口状态的方法检查镜像服的运行状态。\n\n**terminal_name** `str`\n- 新终端的标题或新screen的名称，便于镜像服运维。\n\n**regex_strict** `bool`\n- 在通过端口检查镜像服运行状态时，是否在找到端口后继续验证进程名必须为`java.exe`。一般情况下无需开启。若不同的进程在不同时间可能同时占用了设置的端口，例如在某一时间段Minecraft运行在端口`port`上，另一时间段有其他程序运行在端口`port`上而Minecraft没有运行，那么此选项可以一定程度上避免将其他进程误判为java进程。\n\n**system** `str`\n- 系统类型，若为`null`则将自动获取系统类型。可选：`Linux` `Windows`（需首字母大写）\n\n<br>\n\n### rcon: RCON配置\n```jsonc\n\"rcon\": {\n    \"enable\": false,\n    \"address\": null,\n    \"port\": null,\n    \"password\": null\n}\n```\n**enable** `bool`\n- 是否启用RCON，当MCSM未启用时，插件将通过RCON执行`stop`指令和获取镜像服状态。若同时启用了RCON和终端，插件将优先通过检查RCON状态来获取镜像服状态，若RCON未连接，则将通过检查端口来获取状态。若RCON状态与端口状态不匹配将会提示。\n\n**address** `str`\n- RCON的连接地址，不包含端口。\n\n**port** `int`\n- RCON的连接端口\n\n**password** `str`\n- RCON的连接密码\n\n<br>\n\n### sync: 文件同步相关的配置文件\n```jsonc\n\"sync\": {\n    \"world\": [\n\t\"world\"\n    ],\n    \"source\": \"./server\",\n    \"target\": [\n        \"./Mirror/server\"\n    ],\n    \"ignore_inexistent_target_path\": false,\n    \"concurrency\": 4,\n    \"ignore_files\": [\n        \"session.lock\"\n    ]\n}\n```\n\n在`sync`中，`./`即指服务端所在的`MCDReforged`根目录。\n\n```\nmcdr_root (./)\n ├─ config\n ├─ logs\n ├─ plugins\n ├─ server (./server)\n |   └─ world\n └─ Mirror\n     └─ server (./Mirror/server)\n         └─ world\n```\n\n**world** `list`\n- 需要同步的目录，当存档有多个世界文件时需要添加\n\n**source** `str`\n- 源服务端目录，通常应为MCDR的[工作目录](https://mcdreforged.readthedocs.io/zh-cn/latest/configuration.html#working-directory)，即默认情况下的`server`目录。文件由`source/world` 同步至==> `target/world`\n\n**target** `str, list`\n- 目标服务端目录, 只有一个目录时可只写字符串, 多个目录需为列表。将会为每个目标目录都同步一份源目录的文件。默认情况下镜像服的MCDR工作目录位于当前MCDR的根目录下的`Mirror`目录。\n\n**ignore_inexistent_target_path** `bool`\n- 若某个目标服务端目录不存在，当设置为`false`时，将会跳过对该目录的同步。当设置为`true`时，将会新建该目录并继续同步\n\n**concurrency** `int`\n- 同步时进行哈希计算的线程数\n\n**ignore_files** `list`\n- 不进行同步的文件，若使用`carpet`模组和`plus-carpet-addition(PCA)`模组，建议添加`\"carpet.conf\"` `\"pca.conf\"`\n\n<br>\n\n### command: 指令配置\n\n```jsonc\n\"command\": {\n    \"permission\": {/* 指令权限配置 */},\n    \"action\": {/* 指令行为配置 */}\n}\n```\n\n<br>\n\n### permission: 指令权限配置\n```jsonc\n\"permission\": {\n    \"status\": 0,\n    \"start\": 0,\n    \"stop\": 2,\n    \"kill\": 3,\n    \"sync\": 2,\n    \"confirm\": 0,\n    \"abort\": 0\n}\n```\n`int`\n- 执行各指令所需的最低MCDR权限等级\n\n<br>\n\n### action: 指令行为配置\n```jsonc\n\"action\": {\n    \"status\": {\n        \"require_confirm\": false\n    },\n    \"start\": {\n        \"require_confirm\": false\n    },\n    \"stop\": {\n        \"require_confirm\": true\n    },\n    \"kill\": {\n        \"require_confirm\": true\n    },\n    \"sync\": {\n        \"ensure_server_closed\": true,\n        \"auto_server_restart\": false,\n        \"check_status_interval\": 5,\n        \"max_attempt_times\": 3,\n        \"save_world\": {/* 保存世界配置 */},\n        \"require_confirm\": true\n    },\n    \"confirm\": {\n        \"timeout\": 30,\n        \"cancel_anymsg\": true\n    },\n    \"abort\": {\n        \"operator\": \"everyone\"\n    }\n}\n```\n\n\n### 通用配置\n\n**require_confirm** `bool`\n- 当此选项为`true`时, 执行该指令后需要输入`!!mirror confirm`以确认操作\n\n### sync配置\n**ensure_server_closed** `bool`\n- 当此选项为`true`时, 同步时将会检查镜像服是否已停止。当此选项为`false`时, 无论镜像服是否停止, 都将直接进行同步。\n\n**auto_server_restart** `bool`\n- 此选项仅在`ensure_server_closed`为`true`时生效。当此选项为`true`时, 如果同步时镜像服未停止, 那么将在尝试自动停止镜像服后进行同步, 并在同步完成后自动重启镜像服\n\n**check_status_interval** `int`\n- 此选项仅在`auto_server_restart`生效时生效。同步时停止镜像服后, 插件需确认镜像服是否已停止。此选项为检查镜像服状态的时间间隔\n\n**max_attempt_times** `int`\n- 此选项仅在`auto_server_restart`生效时生效。检查镜像服状态的尝试次数, 超过此尝试次数后将不再尝试检查镜像服状态, 并输出`自动关闭失败`及镜像服当前状态信息。等效于超时时间 `timeout = check_status_interval * max_attempt_times`\n\n**save_world** 保存世界配置 *一般无需更改*\n```jsonc\n\"save_world\": {\n    \"turn_off_auto_save\": true,\n    \"commands\": {\n        \"save_all_worlds\": \"save-all flush\",\n        \"auto_save_off\": \"save-off\",\n        \"auto_save_on\": \"save-on\"\n    },\n    \"saved_world_regex\": \"^Saved the game$\",\n    \"save_world_max_wait_sec\": 60\n}\n```\n**turn_off_auto_save** `bool`\n- 保存世界时关闭自动保存\n\n**commands** 相关指令\n- **save_all_worlds** `str`\n  + 保存世界的指令\n- **auto_save_off** `str`\n  + 关闭自动保存的指令\n- **auto_save_on** `str`\n  + 开启自动保存的指令\n\n**saved_world_regex** `str`\n- 匹配服务端\"世界保存完成\"日志的正则表达式\n\n**save_world_max_wait_sec** `int`\n- 保存世界的最大等待时间(秒)，超时将会跳过世界保存并进行同步\n\n### confirm配置\n玩家只能确认自己执行的指令\n\n**timeout** `int`\n- 需确认的指令经过多少秒后超时取消。若执行某指令后超过`timeout`秒后, 该玩家未进行任何操作, 则此指令超时，自动取消\n\n**cancel_anymsg** `bool`\n- 若玩家执行某指令后发送了除`confirm`指令外的消息, 则此指令操作自动取消。除此之外, 若玩家执行了某指令后又执行了对应镜像服的其他指令, 则先前执行的指令自动取消\n\n### abort配置\n~此功能仍在开发~\n\n<br>\n\n### display: 显示配置\n```jsonc\n\"display\": {\n    \"server_name\": \"Mirror\"\n}\n```\n**server_name** `str`\n- \"镜像服\"的名称，用以在显示时区分不同的镜像服\n\n<br>\n\n### 多镜像服配置文件示例\n\n```jsonc\n{\n    \"!!mirror\": {\n        \"mcsm\": {\n            \"enable\": true,\n            \"url\": \"http://127.0.0.1:23333/\",\n            \"uuid\": \"71154??????????0a1a2f4dd90695609\",\n            \"remote_uuid\": \"6e927??????????999f0e66bc404071b\",\n            \"apikey\": \"b8f???????????????????????????ade\"\n        },\n        \"terminal\": {\n            \"enable\": false,\n            \"launch_path\": \"./Mirror\",\n            \"launch_command\": \"python -m mcdreforged\",\n            \"port\": null,\n            \"terminal_name\": \"Mirror\",\n            \"regex_strict\": false,\n            \"system\": null\n        },\n        \"rcon\": {\n            \"enable\": false,\n            \"address\": null,\n            \"port\": null,\n            \"password\": null\n        },\n        \"sync\": {\n            \"world\": [\n                \"world\"\n            ],\n            \"source\": \"./server\",\n            \"target\": [\n                \"./Mirror/server\"\n            ],\n            \"ignore_inexistent_target_path\": false,\n            \"concurrency\": 4,\n            \"ignore_files\": [\n                \"session.lock\"\n            ]\n        },\n        \"command\": {\n            \"permission\": {\n                \"status\": 0,\n                \"start\": 0,\n                \"stop\": 2,\n                \"kill\": 3,\n                \"sync\": 2,\n                \"confirm\": 0,\n                \"abort\": 0\n            },\n            \"action\": {\n                \"status\": {\n                    \"require_confirm\": false\n                },\n                \"start\": {\n                    \"require_confirm\": false\n                },\n                \"stop\": {\n                    \"require_confirm\": true\n                },\n                \"kill\": {\n                    \"require_confirm\": true\n                },\n                \"sync\": {\n                    \"ensure_server_closed\": true,\n                    \"auto_server_restart\": true,\n                    \"check_status_interval\": 5,\n                    \"max_attempt_times\": 3,\n                    \"save_world\": {\n                        \"turn_off_auto_save\": true,\n                        \"commands\": {\n                            \"save_all_worlds\": \"save-all flush\",\n                            \"auto_save_off\": \"save-off\",\n                            \"auto_save_on\": \"save-on\"\n                        },\n                        \"saved_world_regex\": \"^Saved the game$\",\n                        \"save_world_max_wait_sec\": 60\n                    },\n                    \"require_confirm\": true\n                },\n                \"confirm\": {\n                    \"timeout\": 30,\n                    \"cancel_anymsg\": true\n                },\n                \"abort\": {\n                    \"operator\": \"everyone\"\n                }\n            }\n        },\n        \"display\": {\n            \"server_name\": \"Mirror\"\n        }\n    },\n    \"!!mirror2\": {\n        \"mcsm\": {\n            \"uuid\": \"83011??????????49c1133fc08a41b80\"\n        },\n        \"sync\": {\n            \"target\": [\n                \"./Mirror2/server\"\n            ]\n        },\n        \"display\": {\n            \"server_name\": \"Mirror2\"\n        }\n    },\n    \"!!mirror3\": {\n        \"mcsm\": {\n            \"enable\": false\n        },\n        \"sync\": {\n            \"target\": [\n                \"./Mirror3/server\"\n            ]\n        },\n        \"terminal\": {\n            \"enable\": true,\n            \"launch_path\": \"./Mirror3\",\n            \"port\": 30002,\n            \"terminal_name\": \"Mirror3\"\n        },\n        \"rcon\": {\n            \"enable\": true,\n            \"address\": \"127.0.0.1\",\n            \"port\": 31002,\n            \"password\": \"p@ssw0rd\"\n        }\n    }\n}\n```\n\n## 致谢\n\n- 哈希比对思路 / [better_backup](https://github.com/z0z0r4/better_backup)\n- 配置文件权限配置思路 / [PrimeBackup](https://github.com/TISUnion/PrimeBackup)\n- 保存世界思路 / [QuickBackupM](https://github.com/TISUnion/QuickBackupM)\n\n## ToDo\n\n- [x] 指令执行确认\n- [ ] 指令执行延迟\n- [ ] 禁止同步`!!mirror sync enable/disable reason`\n- [x] lang语言文件\n- [ ] 指令禁用\n- [x] RCON支持\n- [x] 无MCSM下通过命令行启动服务端\n- [ ] Linux/Windows通过终端执行`kill`指令\n- [ ] 历史同步记录显示\n",
    "readme_url": "https://raw.githubusercontent.com/LazyAlienServer/MirrorMcsmcdR/main/README.md",
    "license": {
      "key": "gpl-3.0",
      "name": "GNU General Public License v3.0",
      "spdx_id": "GPL-3.0",
      "url": "https://api.github.com/licenses/gpl-3.0"
    }
  }
}