{
  "schema_version": 1,
  "id": "chunk_backup",
  "authors": [
    "FRUITS_CANDY",
    "Bexerlmao"
  ],
  "repository": "https://github.com/Passion-Never-Dissipate/Chunk_BackUp",
  "branch": "main",
  "related_path": ".",
  "labels": [
    "management"
  ],
  "introduction": {
    "zh_cn": "# Chunk Backup\n一个以区块为单位备份或回档的MCDR插件，在开始使用前建议你详细阅读下文档\n\n您在使用过程中遇到任何问题或想提出建议，欢迎加入我们的交流群号: 417086159\n\n> [!WARNING]\n> \n> 如果您正在使用1.21.5及以上的minecraft版本，请将MCDR版本升级至2.14.7或更高版本，以确保插件的Rtext能正常工作\n\n> [!TIP]\n> \n> README尚未完善，请等待后续完善\n> \n> 目前仅支持mca格式与zlib压缩的区域文件\n> \n> 尽可能的使用最新版本，以避免潜藏的问题\n> \n> 发现bug先看看插件是不是有新版本，新版本大概率会修复问题\n> \n> 升级版本后虽然配置文件能自动升级，但最好检查下\n> \n> 发现问题请提交issue，如果您想为本项目做出贡献，欢迎提交pr\n\nREADME部分内容参考了[MCDR文档](https://docs.mcdreforged.com/zh-cn/latest/quick_start/index.html)\n\n需要 `v2.7.0` 以上的 [MCDReforged](https://github.com/Fallen-Breath/MCDReforged)\n\n> [!NOTE]\n> ## 使用前你必须知道的！！！\n> \n> ### _**位于cb_multi与cb_static内的文件**_\n> \n> ### _**<font color=\"FF0000\">千万！**_\n> \n> ## _**千万！**_\n> \n> # _**千万！**_</font>\n> \n> # _**不可以移动**_\n\n## 我们的优势！！！！\n* 区块级别(小至16x16范围的方块)备份！支持跨世界备份！支持跨维度备份！\n\n* 对自定义维度添加了支持，不再局限于原版的三个维度，以及对spigot，paper一类将world拆分为多个世界的服务端提供了支持，因此备份文件夹的结构与维度的区域文件夹高度类似。\n\n## 你会在什么时候想起我们？\n\n* 服内新建造好了机器，一测坏了！\n\n  *<font color=\"FF0000\" size=6> 回档！！！！！！*</font>\n\n  一回档就要回整个服务器，你会受到来自其他玩家的问候可是我们是\n\n  *<font color=\"FF0000\" size=5> 区块回档！*</font>,完全互不影响 <del>（区块回档的了MVP）</del>\n\n\n* 创建区块手办 <del>（新型赛博手办）</del>（如果你想长期保存这个区块，可以使用静态备份）\n\n## 关于区域与区块的详细解析\n\n### 区域（Region）与区块（Chunk）定义：\n\n* 区域文件存储的范围称为区域（Region），每个区域包含32×32个区块。\n\n* 一个区块的x和z范围均为16×16，您可以通过在游戏中按下F3+G查看区块边界。\n\n### 坐标换算规则：\n\n* 区块x,z坐标：通过将x,z坐标除以16并向下取整得到。\n\n* 区域x,z坐标：通过将区块x,z坐标除以32并向下取整得到。\n\n### 备份的最小单位\n\n* 本插件能够操控的最小单位为一个区块，即16×16×256格（在Minecraft 1.18及以上版本为384格）。因此，在备份或回档时，最小范围也是一个区块。\n\n### Chunk_BackUp（cb）的备份机制：\n\n* 假设需要备份主世界的区域文件r.0.0.mca中的区块(1,1)和(2,2)，cb会在备份文件夹中创建r.0.0.region文件来存放这些区块的数据。\n\n* 如果r.0.0.mca文件不存在，cb同样会创建r.0.0.region文件。因为不存在表明这些区块的数据为空，而空的状态也需要被备份。\n\n### 关于区块内容的完整性：\n\n* 玩家加载过的区块中，region(方块数据)必定存在，但entities（实体）与poi（兴趣点）可能不存在。\n\n* 如果在备份区块(1,1)和(2,2)时，只有region存在，而entities与poi不存在，那么在之后的回档过程中，如果(1,1)和(2,2)出现了新的entities与poi，仅回档region数据将导致状态不一致。\n\n* 为了保持区块在备份时与回档后的状态一致，只要region、poi、entities中有不存在的，cb就需要在备份文件夹中创建相应的r.0.0.region文件来保存这些区块的entities与poi的空状态。\n\n### 备份文件的使用：\n\n* 在r.0.0.region文件中，(1,1)和(2,2)位置的偏移量被设为0，其他位置保持默认的0偏移量。\n\n* 在备份时，尽量框选在世界上已生成的区块，否则每个不存在的区块插件都会为其生成对应的空的区域文件来存放该区块的空状态，可能会给服务器带来卡顿\n\n* 使用r.0.0.region对r.0.0.mca进行回档时，这些区块(1,1)和(2,2)会覆盖目标区域文件中的对应区块，而目标区域文件内的其他区块则不会受到影响。\n\n* 如果目标区域文件r.0.0.mca不存在，则会在目标文件夹内新建一个r.0.0.mca文件，并用r.0.0.region中的数据来覆盖新文件中对应的区块。\n\n## 插件使用说明\n\n* 插件目前有两种备份模式(动态备份，静态备份)，四种备份指令(半径备份，坐标备份，维度备份，自定义备份)\n\n* 三种回档指令(槽位回档，子槽位回档，撤回回档)，具体见指令说明\n\n* 本插件具有静态备份功能(即不会被替换的备份)，静态备份采用独立文件夹存储在```./cb_static```，与之相对的动态备份存储在```./cb_multi```，具体见指令说明。\n\n* 本插件支持多维度，原版环境下，0对应主世界，-1对应下界，1对应末地，在您的服务器有其他世界的情况下，您可以自定义一个整数来对应新的维度，这使得您的其他维度能够被插件识别，这个\n  整数与对应的维度名不能与其他维度的重复。\n\n  *<font color=\"FF0000\" size=6>维度名不能随便填写！*</font>\n\n> [!TIP]\n> \n> (1) 使用F3调试屏幕：在游戏中按下F3键，可以打开调试屏幕。在调试屏幕的左上角部分，可以看到当前所在维度的信息。\n> \n> ![图片加载失败](https://raw.githubusercontent.com/Passion-Never-Dissipate/Chunk_BackUp/main/images/before_use1.png)\n> \n> 由此可知该玩家所在维度的合法维度名为```twilightforest:twilight_forest```\n> \n> (2) 使用/data get entity 玩家id Dimension指令来获取玩家当前所在维度名\n> \n> ![图片加载失败](https://raw.githubusercontent.com/Passion-Never-Dissipate/Chunk_BackUp/main/images/before_use2.png)\n> \n> 由此可知该玩家所在维度的合法维度名为```twilightforest:twilight_forest```\n> \n> 以下是一个添加其他维度的例子：\n> \n> ```\n> \"dimension_info\": {\n>        \"-2\": {\n>            \"dimension\": \"twilightforest:twilight_forest\",\n>            \"world_name\": \"world\",\n>            \"region_folder\": [\n>                \"dimensions/twilightforest/twilight_forest/poi\",\n>                \"dimensions/twilightforest/twilight_forest/entities\",\n>                \"dimensions/twilightforest/twilight_forest/region\"\n>            ]\n>        },\n>        \"0\": {\n>            \"dimension\": \"minecraft:overworld\",\n>            \"world_name\": \"world\",\n>            \"region_folder\": [\n>                \"poi\",\n>                \"entities\",\n>                \"region\"\n>            ]\n>        },\n>        \"-1\": {\n>            \"dimension\": \"minecraft:the_nether\",\n>            \"world_name\": \"world\",\n>            \"region_folder\": [\n>                \"DIM-1/poi\",\n>                \"DIM-1/entities\",\n>                \"DIM-1/region\"\n>            ]\n>        },\n>        \"1\": {\n>            \"dimension\": \"minecraft:the_end\",\n>           \"world_name\": \"world\",\n>            \"region_folder\": [\n>                \"DIM1/poi\",\n>                \"DIM1/entities\",\n>                \"DIM1/region\"\n>            ]\n>        }\n> ```\n> \n> 由上例可知，```-2```与```twilightforest:twilight_forest```是新增加的一对维度,现在你也可以对该维度使用备份功能了！\n> \n> 我们注意到一个维度数字对应的维度信息包含维度名(```dimension```参数),该维度所在的世界文件夹(```world_name```参数),该维度的区域文件(```r.x.z.mca```)所在的文件夹(```region_folder```参数)\n\n### 参数说明具体见下文的配置文件说明\n\n* 因此，该维度的区域文件所在路径应为：\n\n  ```\n  ./server_path参数/world_name参数/region_folder参数中的任一文件夹/r.x.z.mca\n  ```\n\n  根据以上格式，您可以准确的的获取到某个维度的所有参数\n\n  对于使用多世界文件夹的服务端，如spigot，paper等，使用插件前应在```chunk_backup.json```配置文件里将```world_name```参数设置为对应维度的存档文件夹\n\n  多世界文件夹服务器端使用的dimension_info与单世界文件夹服务端的相同\n\n  该参数编辑方法与上文的无本质区别，仅是不同维度对应的```world_name```不同\n\n* 插件在非原版端或fabric端上运行时，您需要修改MCDR的配置文件```config.yml```中的服务端处理器```handler```参数选择适合您服务端的处理器，错误的处理器将导致MCDR无法处理来自该服务端的消息。它位于，也应位于 MCDR 的工作目录中。\n\n* 内置的处理器及其适用的服务端见[服务端处理器列表](https://docs.mcdreforged.com/zh-cn/latest/configuration.html#handler)\n\n> [!TIP]\n> \n> 插件使用时，如果出现乱码，您可能需要保证与服务端相关的一切编解码都用上 UTF-8，具体方法见下：\n> \n> \n> 让 MCDR 使用 UTF-8 与 Minecraft 服务端通信，即在 MCDR 配置中将```encoding```和```decoding```设置为```utf8```\n> \n> ```\n> encoding: utf8\n> decoding: utf8\n> ```\n> \n> 确保启动 Minecraft 的 JVM 也使用 UTF-8 作为默认字符集。你可以通过以下任一操作来实现：\n> \n> 在MCDR配置文件中```start_command```中的```-jar```参数前面加一个诸如```-Dfile.encoding=UTF-8```的 JVM 属性，以确保服务端运行在一个 UTF-8 的环境中，具体见下\n> \n> > Java >= 19: ```-Dfile.encoding=UTF-8 -Dstdout.encoding=UTF-8 -Dstderr.encoding=UTF-8```\n> \n> > Java = 18: ```-Dfile.encoding=UTF-8 -Dsun.stdout.encoding=UTF-8 -Dsun.stderr.encoding=UTF-8```\n> \n> > Java <= 17: ```-Dfile.encoding=UTF-8```\n> \n> 最后重新加载MCDR的配置文件就可以了\n\n* 如果您的服务端加入了改变消息输出格式的插件或mod导致MCDR无法解析控制台消息或插件功能无法使用，请不要在本仓库发起issue，因为这个问题的发生与MCDR和插件无关，你可以自己写一个服务端处理器。\n\n* 由于插件在备份时会保存区块的方块数据、实体数据和兴趣点数据，因此可能会有玩家用此来刷取物品，因为插件只会备份与区块有关的数据，而不会与其他数据产生交互。\n\n* 尽量不要在插件进行备份回档升级操作时重载插件。\n\n* 备份时会在槽位里创建一个```info.json```文件，该文件存储着槽位的所有信息，请不要删除它，否则该槽位会被认定为无效槽位\n\n* 如果在回档后你想撤销本次回档，你可以使用```!!cb restore```指令，来将存档还原到回档前状态\n\n## 命令格式说明\n\n`!!cb` 显示帮助信息\n\n`!!cb help` 显示全部指令\n\n`!!cb make <区块半径> <注释>` 以玩家所在区块为中心,备份边长为2倍半径+1的区块所在区块\n\n`!!cb make -s <区块半径> <注释>` 同上,只是创建的备份为静态备份(即永久备份)\n\n`!!cb dmake <维度:0主世界,-1地狱,1末地> <注释>` 备份给定维度的所有区块,维度间用,做区分 例 0 或 0,-1\n\n`!!cb dmake -s <维度:0主世界,-1地狱,1末地> <注释>` 同上,只是创建的备份为静态备份(即永久备份)\n\n`!!cb pmake <x1坐标> <z1坐标> <x2坐标> <z2坐标> in <维度> <注释>` 给定两个坐标点，备份以两坐标点所在的区块坐标为顶点形成的矩形区块\n\n`!!cb pmake -s <x1坐标> <z1坐标> <x2坐标> <z2坐标> in <维度> <注释>` 同上,只是创建的备份为静态备份(即永久备份)\n\n`!!cb back <槽位>` 回档指定槽位所对应的区块\n\n`!!cb back -s <槽位>` 同上,只是回档的对象为静态备份(即永久备份)\n\n`!!cb restore` 使存档还原到回档前状态\n\n`!!cb del <槽位>` 删除某槽位\n\n`!!cb del -s <槽位>` 同上,只是删除的备份为静态备份(即永久备份)\n\n`!!cb confirm` 再次确认是否回档\n\n`!!cb abort` 在任何时候键入此指令可中断回档\n\n`!!cb list` 显示备份槽位信息\n\n`!!cb list -s` 同上,只是查看的备份为静态备份(即永久备份)\n\n`!!cb list <page>` 显示备份槽位信息(太好了可以选择翻页了)\n\n`!!cb list -s <page>` 同上,只是查看的备份为静态备份(即永久备份)\n\n`!!cb show <slot>` 显示给定槽位的所有信息\n\n`!!cb show -s <slot>` 同上,只是显示的信息为静态备份(即永久备份)\n\n`!!cb show overwrite` 显示覆盖备份槽位的所有信息\n\n`!!cb set slot <数量>` 修改动态备份槽位最大数量\n\n`!!cb set slot -s <数量>` 同上,只是修改的数量为静态备份(即永久备份)\n\n`!!cb set max_chunk_length <区块边长>` 修改备份的最大区块边长\n\n`!!cb reload` 重载插件\n\n`!!cb force_reload` 强行重载插件,用于插件功能无法正常使用\n\n`!!cb show <槽位> page <页数>` 分页查看指定槽位的子备份列表\n\n`!!cb show <槽位> <子槽位>` 查看指定子槽位的详细信息\n\n`!!cb show -s <槽位> page <页数>` 分页查看静态备份的子备份列表\n\n`!!cb show -s <槽位> <子槽位>` 查看静态备份的指定子槽位信息\n\n`!!cb back <槽位> <子槽位组>` 回档自定义备份的指定子槽位组（例：1,2,3）\n\n`!!cb back -s <槽位> <子槽位组>` 操作静态备份的子槽位组\n\n`!!cb custom create <自定义备份名>` 创建自定义备份对象\n\n`!!cb custom list` 列出所有自定义备份对象\n\n`!!cb custom save <自定义备份名>` 备份该自定义备份对象\n\n`!!cb custom save -s <自定义备份名>` 参数同上,但保存为静态备份(即永久备份)\n\n`!!cb custom show <自定义备份名> page <页数>` 分页查看自定义备份的子槽位列表\n\n`!!cb custom show <自定义备份名> <子槽位>` 查看自定义备份的指定子槽位信息\n\n`!!cb custom del <自定义备份名>` 删除自定义备份对象\n\n`!!cb custom del <自定义备份名> <子槽位>` 删除自定义备份对象的指定子槽位\n\n`!!cb custom pmake <自定义备份名> <x1> <z1> <x2> <z2> in <维度> [<注释>]` 添加坐标范围子备份\n\n`!!cb custom make <自定义备份名> <半径> [<注释>]` 添加半径模式子备份\n\n`!!cb rollback` 查看上次回档的详细信息\n\n## 配置文件选项说明\n\n* 配置文件为`config/chunk_backup/chunk_backup.json`。它会在第一次运行时自动生成\n\n> 当你修改了配置文件后，记得输入!!cb reload来重载配置文件\n\n* ### server_path\n\n  默认值：`./server`\n\n  服务端文件夹的路径。`./server` 即为 MCDR 的默认服务端文件夹路径\n\n* ### backup_path\n\n  默认值：`./cb_multi`\n\n  存储动态备份文件的路径\n\n* ### static_backup_path\n\n  默认值：`./cb_static`\n\n  存储静态备份文件的路径\n\n* ### overwrite_backup_folder\n\n  默认值: `overwrite`\n\n  被覆盖的区块备份的备份位置，在配置文件均为默认值的情况下路径为 `./cb_multi/overwrite`\n\n* ### prefix\n\n  默认值: !!cb\n\n  插件指令的前缀，在指令未与其他插件起冲突的情况下，你最好不要更改它\n\n* ### dimension_info\n\n  默认值：\n> ```\n>     {\n>        \"0\": {\"dimension\": \"minecraft:overworld\",\n>              \"world_name\": \"world\",\n>              \"region_folder\": [\n>                  \"poi\",\n>                  \"entities\",\n>                  \"region\"\n>              ]\n>              },\n>        \"-1\": {\"dimension\": \"minecraft:the_nether\",\n>               \"world_name\": \"world\",\n>               \"region_folder\": [\n>                   \"DIM-1/poi\",\n>                   \"DIM-1/entities\",\n>                   \"DIM-1/region\"\n>               ]\n>               },\n>        \"1\": {\"dimension\": \"minecraft:the_end\",\n>              \"world_name\": \"world\",\n>              \"region_folder\": [\n>                  \"DIM1/poi\",\n>                  \"DIM1/entities\",\n>                  \"DIM1/region\"\n>              ]\n>              }\n>     }\n> ```\n\n`单世界`文件夹服务端所对应的维度信息\n\n* ### data_getter\n\n  默认值：\n> ```\n>     {\n>        \"get_pos\": \"data get entity {name} Pos\",\n>        \"get_dimension\": \"data get entity {name} Dimension\",\n>        \"save_worlds\": \"save-all flush\",\n>        \"auto_save_off\": \"save-off\",\n>        \"auto_save_on\": \"save-on\",\n>        \"get_pos_regex\": \"^{name} has the following entity data: \\\\[(?P<x>-?\\\\d*\\\\.?\\\\d+(?:[eE][-+]?\\\\d+)?)d, (?P<y>-?\\\\d*\\\\.?\\\\d+(?:[eE][-+]?\\\\d+)?)d, (?P<z>-?\\\\d*\\\\.?\\\\d+(?:[eE][-+]?\\\\d+)?)d\\\\]$\",\n>        \"get_dimension_regex\": \"^{name} has the following entity data: \\\"(?P<dimension>[^\\\"]+)\\\"$\",\n>        \"save_off_regex\": \"Automatic saving is now disabled\",\n>        \"saved_world_regex\": \"Saved the game\"\n>    }\n> ```\n\n一个存储了各种指令及其返回值的字典, 大部分情况下，你不需要修改它\n\n* #### get_pos\n  获取玩家坐标的指令，{name}为玩家名，是一个f-string内的变量(不知道请自行查阅)\n\n* #### get_dimension\n  获取玩家所在维度的指令\n\n* #### save_worlds\n  保存世界的指令\n\n* #### auto_save_off\n  关闭自动保存的指令\n\n* #### auto_save_on\n  打开自动保存的指令\n\n* #### get_pos_regex\n  获取玩家坐标指令的返回值，是一个包含了f-string与正则表达式的字符串，{name}为玩家名，<x> <y> <z>代表了坐标\n\n* #### get_dimension_regex\n  获取玩家所在维度指令的返回值，<dimension>代表玩家所在的维度名\n\n* #### save_off_regex\n  关闭自动保存指令的返回值，是一个普通字符串，插件会进行全串匹配，不要在这里使用正则表达式\n\n* #### saved_world_regex\n  保存世界指令的返回值，是一个普通字符串，插件会进行全串匹配，不要在这里使用正则表达式\n\n* ### minimum_permission_level\n\n默认值：\n\n> ``` \n>   {\n>        \"make\": 1,\n>        \"pmake\": 1,\n>        \"dmake\": 1,\n>        \"back\": 2,\n>        \"restore\": 2,\n>        \"del\": 2,\n>        \"confirm\": 1,\n>        \"abort\": 1,\n>        \"reload\": 2,\n>        \"force_reload\": 3,\n>        \"list\": 0,\n>        \"show\": 1,\n>        \"set\": 2,\n>        \"custom\": 1,\n>        \"rollback\": 1\n>    }\n> ```\n\n一个字典，代表使用不同类型指令需要权限等级。数值含义见[此处](https://mcdreforged.readthedocs.io/zh_CN/latest/permission.html)\n\n把所有数值设置成 `0` 以让所有人均可操作\n\n* ### max_chunk_length\n  框选区块的最大区块边长\n\n  默认值：320\n\n  默认的的最大范围为5120 x 5120大小的方块，说实话，完全够用了\n\n* ### slot\n  普通备份(即动态备份)的槽位数量\n\n  默认值：10\n\n  动态槽位数量满了在新创建备份时，会删除最后一个槽位来为新槽位腾出空间\n\n* ### static_slot\n\n  静态备份的槽位数量\n\n  默认值：50\n\n  静态槽位数量满了在新创建备份时，会撤销此次备份\n\n\n* ### max_works\n\n  进行文件复制时的并行处理线程数\n\n  默认值：4\n\n  在进行备份或回档操作时，最大同时调用的线程数，建议不超过cpu线程数量的一半\n"
  },
  "introduction_urls": {
    "zh_cn": "https://raw.githubusercontent.com/Passion-Never-Dissipate/Chunk_BackUp/main/README.md"
  }
}